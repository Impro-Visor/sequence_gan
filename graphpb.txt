node {
  name: "tokens/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 5
      }
    }
  }
}
node {
  name: "hyperparams/Variable/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9599999785423279
      }
    }
  }
}
node {
  name: "hyperparams/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "hyperparams/Variable/Assign"
  op: "Assign"
  input: "hyperparams/Variable"
  input: "hyperparams/Variable/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@hyperparams/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "hyperparams/Variable/read"
  op: "Identity"
  input: "hyperparams/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@hyperparams/Variable"
      }
    }
  }
}
node {
  name: "rewards/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "rewards/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rewards/Variable/Assign"
  op: "Assign"
  input: "rewards/Variable"
  input: "rewards/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rewards/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rewards/Variable/read"
  op: "Identity"
  input: "rewards/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rewards/Variable"
      }
    }
  }
}
node {
  name: "generator/generator/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "generator/generator/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/generator/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/generator/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/generator/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/generator/random_normal/mul"
  op: "Mul"
  input: "generator/generator/random_normal/RandomStandardNormal"
  input: "generator/generator/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/random_normal"
  op: "Add"
  input: "generator/generator/random_normal/mul"
  input: "generator/generator/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 36
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/generator/Variable/Assign"
  op: "Assign"
  input: "generator/generator/Variable"
  input: "generator/generator/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/generator/Variable/read"
  op: "Identity"
  input: "generator/generator/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable"
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/generator/weights/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/generator/weights/random_normal/mul"
  op: "Mul"
  input: "generator/generator/weights/random_normal/RandomStandardNormal"
  input: "generator/generator/weights/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/weights/random_normal"
  op: "Add"
  input: "generator/generator/weights/random_normal/mul"
  input: "generator/generator/weights/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/weights/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 70
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/generator/weights/Variable/Assign"
  op: "Assign"
  input: "generator/generator/weights/Variable"
  input: "generator/generator/weights/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/weights/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/generator/weights/Variable/read"
  op: "Identity"
  input: "generator/generator/weights/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/weights/Variable"
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_1/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_1/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_1/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/generator/weights/random_normal_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_1/mul"
  op: "Mul"
  input: "generator/generator/weights/random_normal_1/RandomStandardNormal"
  input: "generator/generator/weights/random_normal_1/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_1"
  op: "Add"
  input: "generator/generator/weights/random_normal_1/mul"
  input: "generator/generator/weights/random_normal_1/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/weights/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 70
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/generator/weights/Variable_1/Assign"
  op: "Assign"
  input: "generator/generator/weights/Variable_1"
  input: "generator/generator/weights/random_normal_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/weights/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/generator/weights/Variable_1/read"
  op: "Identity"
  input: "generator/generator/weights/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/weights/Variable_1"
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_2/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_2/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_2/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/generator/weights/random_normal_2/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_2/mul"
  op: "Mul"
  input: "generator/generator/weights/random_normal_2/RandomStandardNormal"
  input: "generator/generator/weights/random_normal_2/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_2"
  op: "Add"
  input: "generator/generator/weights/random_normal_2/mul"
  input: "generator/generator/weights/random_normal_2/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/weights/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 70
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/generator/weights/Variable_2/Assign"
  op: "Assign"
  input: "generator/generator/weights/Variable_2"
  input: "generator/generator/weights/random_normal_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/weights/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/generator/weights/Variable_2/read"
  op: "Identity"
  input: "generator/generator/weights/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/weights/Variable_2"
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000F\000\000\000"
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_3/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_3/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_3/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/generator/weights/random_normal_3/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_3/mul"
  op: "Mul"
  input: "generator/generator/weights/random_normal_3/RandomStandardNormal"
  input: "generator/generator/weights/random_normal_3/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_3"
  op: "Add"
  input: "generator/generator/weights/random_normal_3/mul"
  input: "generator/generator/weights/random_normal_3/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/weights/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 70
        }
        dim {
          size: 70
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/generator/weights/Variable_3/Assign"
  op: "Assign"
  input: "generator/generator/weights/Variable_3"
  input: "generator/generator/weights/random_normal_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/weights/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/generator/weights/Variable_3/read"
  op: "Identity"
  input: "generator/generator/weights/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/weights/Variable_3"
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000F\000\000\000"
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_4/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_4/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_4/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/generator/weights/random_normal_4/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_4/mul"
  op: "Mul"
  input: "generator/generator/weights/random_normal_4/RandomStandardNormal"
  input: "generator/generator/weights/random_normal_4/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_4"
  op: "Add"
  input: "generator/generator/weights/random_normal_4/mul"
  input: "generator/generator/weights/random_normal_4/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/weights/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 70
        }
        dim {
          size: 70
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/generator/weights/Variable_4/Assign"
  op: "Assign"
  input: "generator/generator/weights/Variable_4"
  input: "generator/generator/weights/random_normal_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/weights/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/generator/weights/Variable_4/read"
  op: "Identity"
  input: "generator/generator/weights/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/weights/Variable_4"
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000F\000\000\000"
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_5/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_5/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_5/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/generator/weights/random_normal_5/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_5/mul"
  op: "Mul"
  input: "generator/generator/weights/random_normal_5/RandomStandardNormal"
  input: "generator/generator/weights/random_normal_5/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/weights/random_normal_5"
  op: "Add"
  input: "generator/generator/weights/random_normal_5/mul"
  input: "generator/generator/weights/random_normal_5/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/weights/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 70
        }
        dim {
          size: 70
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/generator/weights/Variable_5/Assign"
  op: "Assign"
  input: "generator/generator/weights/Variable_5"
  input: "generator/generator/weights/random_normal_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/weights/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/generator/weights/Variable_5/read"
  op: "Identity"
  input: "generator/generator/weights/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/weights/Variable_5"
      }
    }
  }
}
node {
  name: "generator/generator/random_normal_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000F\000\000\000"
      }
    }
  }
}
node {
  name: "generator/generator/random_normal_1/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/generator/random_normal_1/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/generator/random_normal_1/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/generator/random_normal_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/generator/random_normal_1/mul"
  op: "Mul"
  input: "generator/generator/random_normal_1/RandomStandardNormal"
  input: "generator/generator/random_normal_1/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/random_normal_1"
  op: "Add"
  input: "generator/generator/random_normal_1/mul"
  input: "generator/generator/random_normal_1/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator/generator/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 70
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/generator/Variable_1/Assign"
  op: "Assign"
  input: "generator/generator/Variable_1"
  input: "generator/generator/random_normal_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/generator/Variable_1/read"
  op: "Identity"
  input: "generator/generator/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable_1"
      }
    }
  }
}
node {
  name: "generator/generator/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/generator/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/generator/Variable_2/Assign"
  op: "Assign"
  input: "generator/generator/Variable_2"
  input: "generator/generator/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/generator/Variable_2/read"
  op: "Identity"
  input: "generator/generator/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable_2"
      }
    }
  }
}
node {
  name: "generator/generator/zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 36
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/generator/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 36
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/generator/Variable_3/Assign"
  op: "Assign"
  input: "generator/generator/Variable_3"
  input: "generator/generator/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/generator/Variable_3/read"
  op: "Identity"
  input: "generator/generator/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable_3"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/discriminator/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "discriminator/discriminator/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/discriminator/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator/discriminator/random_normal/mul"
  op: "Mul"
  input: "discriminator/discriminator/random_normal/RandomStandardNormal"
  input: "discriminator/discriminator/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/random_normal"
  op: "Add"
  input: "discriminator/discriminator/random_normal/mul"
  input: "discriminator/discriminator/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 36
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/discriminator/Variable/Assign"
  op: "Assign"
  input: "discriminator/discriminator/Variable"
  input: "discriminator/discriminator/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/discriminator/Variable/read"
  op: "Identity"
  input: "discriminator/discriminator/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/discriminator/weights/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal/mul"
  op: "Mul"
  input: "discriminator/discriminator/weights/random_normal/RandomStandardNormal"
  input: "discriminator/discriminator/weights/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal"
  op: "Add"
  input: "discriminator/discriminator/weights/random_normal/mul"
  input: "discriminator/discriminator/weights/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 70
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable/Assign"
  op: "Assign"
  input: "discriminator/discriminator/weights/Variable"
  input: "discriminator/discriminator/weights/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable/read"
  op: "Identity"
  input: "discriminator/discriminator/weights/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_1/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_1/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_1/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/discriminator/weights/random_normal_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_1/mul"
  op: "Mul"
  input: "discriminator/discriminator/weights/random_normal_1/RandomStandardNormal"
  input: "discriminator/discriminator/weights/random_normal_1/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_1"
  op: "Add"
  input: "discriminator/discriminator/weights/random_normal_1/mul"
  input: "discriminator/discriminator/weights/random_normal_1/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 70
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_1/Assign"
  op: "Assign"
  input: "discriminator/discriminator/weights/Variable_1"
  input: "discriminator/discriminator/weights/random_normal_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_1/read"
  op: "Identity"
  input: "discriminator/discriminator/weights/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_1"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_2/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_2/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_2/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/discriminator/weights/random_normal_2/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_2/mul"
  op: "Mul"
  input: "discriminator/discriminator/weights/random_normal_2/RandomStandardNormal"
  input: "discriminator/discriminator/weights/random_normal_2/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_2"
  op: "Add"
  input: "discriminator/discriminator/weights/random_normal_2/mul"
  input: "discriminator/discriminator/weights/random_normal_2/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 70
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_2/Assign"
  op: "Assign"
  input: "discriminator/discriminator/weights/Variable_2"
  input: "discriminator/discriminator/weights/random_normal_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_2/read"
  op: "Identity"
  input: "discriminator/discriminator/weights/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_2"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000F\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_3/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_3/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_3/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/discriminator/weights/random_normal_3/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_3/mul"
  op: "Mul"
  input: "discriminator/discriminator/weights/random_normal_3/RandomStandardNormal"
  input: "discriminator/discriminator/weights/random_normal_3/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_3"
  op: "Add"
  input: "discriminator/discriminator/weights/random_normal_3/mul"
  input: "discriminator/discriminator/weights/random_normal_3/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 70
        }
        dim {
          size: 70
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_3/Assign"
  op: "Assign"
  input: "discriminator/discriminator/weights/Variable_3"
  input: "discriminator/discriminator/weights/random_normal_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_3/read"
  op: "Identity"
  input: "discriminator/discriminator/weights/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_3"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000F\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_4/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_4/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_4/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/discriminator/weights/random_normal_4/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_4/mul"
  op: "Mul"
  input: "discriminator/discriminator/weights/random_normal_4/RandomStandardNormal"
  input: "discriminator/discriminator/weights/random_normal_4/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_4"
  op: "Add"
  input: "discriminator/discriminator/weights/random_normal_4/mul"
  input: "discriminator/discriminator/weights/random_normal_4/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 70
        }
        dim {
          size: 70
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_4/Assign"
  op: "Assign"
  input: "discriminator/discriminator/weights/Variable_4"
  input: "discriminator/discriminator/weights/random_normal_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_4/read"
  op: "Identity"
  input: "discriminator/discriminator/weights/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_4"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000F\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_5/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_5/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_5/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/discriminator/weights/random_normal_5/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_5/mul"
  op: "Mul"
  input: "discriminator/discriminator/weights/random_normal_5/RandomStandardNormal"
  input: "discriminator/discriminator/weights/random_normal_5/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/weights/random_normal_5"
  op: "Add"
  input: "discriminator/discriminator/weights/random_normal_5/mul"
  input: "discriminator/discriminator/weights/random_normal_5/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 70
        }
        dim {
          size: 70
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_5/Assign"
  op: "Assign"
  input: "discriminator/discriminator/weights/Variable_5"
  input: "discriminator/discriminator/weights/random_normal_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/discriminator/weights/Variable_5/read"
  op: "Identity"
  input: "discriminator/discriminator/weights/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_5"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/random_normal_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000F\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/random_normal_1/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/discriminator/random_normal_1/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "discriminator/discriminator/random_normal_1/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/discriminator/random_normal_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator/discriminator/random_normal_1/mul"
  op: "Mul"
  input: "discriminator/discriminator/random_normal_1/RandomStandardNormal"
  input: "discriminator/discriminator/random_normal_1/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/random_normal_1"
  op: "Add"
  input: "discriminator/discriminator/random_normal_1/mul"
  input: "discriminator/discriminator/random_normal_1/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator/discriminator/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 70
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/discriminator/Variable_1/Assign"
  op: "Assign"
  input: "discriminator/discriminator/Variable_1"
  input: "discriminator/discriminator/random_normal_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/discriminator/Variable_1/read"
  op: "Identity"
  input: "discriminator/discriminator/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable_1"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/discriminator/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/discriminator/Variable_2/Assign"
  op: "Assign"
  input: "discriminator/discriminator/Variable_2"
  input: "discriminator/discriminator/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/discriminator/Variable_2/read"
  op: "Identity"
  input: "discriminator/discriminator/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable_2"
      }
    }
  }
}
node {
  name: "discriminator/discriminator/zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/discriminator/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 70
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/discriminator/Variable_3/Assign"
  op: "Assign"
  input: "discriminator/discriminator/Variable_3"
  input: "discriminator/discriminator/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/discriminator/Variable_3/read"
  op: "Identity"
  input: "discriminator/discriminator/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable_3"
      }
    }
  }
}
node {
  name: "h/Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 70
        }
      }
    }
  }
}
node {
  name: "input/Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
}
node {
  name: "samples/Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
}
node {
  name: "gens/TensorArray/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gens/TensorArray"
  op: "TensorArrayV3"
  input: "gens/TensorArray/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gens/TensorArray_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gens/TensorArray_1"
  op: "TensorArrayV3"
  input: "gens/TensorArray_1/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "samples_1/TensorArray/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "samples_1/TensorArray"
  op: "TensorArrayV3"
  input: "samples_1/TensorArray/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "samples_1/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "samples_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "samples_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "samples_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "samples_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "samples_1/TensorArrayUnstack/Shape"
  input: "samples_1/TensorArrayUnstack/strided_slice/stack"
  input: "samples_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "samples_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "samples_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "samples_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "samples_1/TensorArrayUnstack/range"
  op: "Range"
  input: "samples_1/TensorArrayUnstack/range/start"
  input: "samples_1/TensorArrayUnstack/strided_slice"
  input: "samples_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "samples_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "samples_1/TensorArray"
  input: "samples_1/TensorArrayUnstack/range"
  input: "samples/Placeholder"
  input: "samples_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@samples_1/TensorArray"
      }
    }
  }
}
node {
  name: "generator_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator_1/Gather"
  op: "Gather"
  input: "generator/generator/Variable/read"
  input: "tokens/Const"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "generator_1/while/Enter"
  op: "Enter"
  input: "generator_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/Enter_1"
  op: "Enter"
  input: "generator_1/Gather"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/Enter_2"
  op: "Enter"
  input: "h/Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/Enter_3"
  op: "Enter"
  input: "gens/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/Enter_4"
  op: "Enter"
  input: "gens/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/Merge"
  op: "Merge"
  input: "generator_1/while/Enter"
  input: "generator_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_1/while/Merge_1"
  op: "Merge"
  input: "generator_1/while/Enter_1"
  input: "generator_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/Merge_2"
  op: "Merge"
  input: "generator_1/while/Enter_2"
  input: "generator_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/Merge_3"
  op: "Merge"
  input: "generator_1/while/Enter_3"
  input: "generator_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/Merge_4"
  op: "Merge"
  input: "generator_1/while/Enter_4"
  input: "generator_1/while/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/Less/y"
  op: "Const"
  input: "^generator_1/while/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "generator_1/while/Less"
  op: "Less"
  input: "generator_1/while/Merge"
  input: "generator_1/while/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_1/while/LoopCond"
  op: "LoopCond"
  input: "generator_1/while/Less"
}
node {
  name: "generator_1/while/Switch"
  op: "Switch"
  input: "generator_1/while/Merge"
  input: "generator_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/Merge"
      }
    }
  }
}
node {
  name: "generator_1/while/Switch_1"
  op: "Switch"
  input: "generator_1/while/Merge_1"
  input: "generator_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "generator_1/while/Switch_2"
  op: "Switch"
  input: "generator_1/while/Merge_2"
  input: "generator_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "generator_1/while/Switch_3"
  op: "Switch"
  input: "generator_1/while/Merge_3"
  input: "generator_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "generator_1/while/Switch_4"
  op: "Switch"
  input: "generator_1/while/Merge_4"
  input: "generator_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/Merge_4"
      }
    }
  }
}
node {
  name: "generator_1/while/Identity"
  op: "Identity"
  input: "generator_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_1/while/Identity_1"
  op: "Identity"
  input: "generator_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/Identity_2"
  op: "Identity"
  input: "generator_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/Identity_3"
  op: "Identity"
  input: "generator_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/Identity_4"
  op: "Identity"
  input: "generator_1/while/Switch_4:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/Reshape/shape"
  op: "Const"
  input: "^generator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/Reshape"
  op: "Reshape"
  input: "generator_1/while/Identity_1"
  input: "generator_1/while/g_recurr_unit/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/Reshape_1/shape"
  op: "Const"
  input: "^generator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/Reshape_1"
  op: "Reshape"
  input: "generator_1/while/Identity_2"
  input: "generator_1/while/g_recurr_unit/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/MatMul/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/MatMul"
  op: "MatMul"
  input: "generator_1/while/g_recurr_unit/MatMul/Enter"
  input: "generator_1/while/g_recurr_unit/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/MatMul_1"
  op: "MatMul"
  input: "generator_1/while/g_recurr_unit/MatMul_1/Enter"
  input: "generator_1/while/g_recurr_unit/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/add"
  op: "Add"
  input: "generator_1/while/g_recurr_unit/MatMul"
  input: "generator_1/while/g_recurr_unit/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/Sigmoid"
  op: "Sigmoid"
  input: "generator_1/while/g_recurr_unit/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/MatMul_2/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/MatMul_2"
  op: "MatMul"
  input: "generator_1/while/g_recurr_unit/MatMul_2/Enter"
  input: "generator_1/while/g_recurr_unit/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/MatMul_3/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/MatMul_3"
  op: "MatMul"
  input: "generator_1/while/g_recurr_unit/MatMul_3/Enter"
  input: "generator_1/while/g_recurr_unit/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/add_1"
  op: "Add"
  input: "generator_1/while/g_recurr_unit/MatMul_2"
  input: "generator_1/while/g_recurr_unit/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/Sigmoid_1"
  op: "Sigmoid"
  input: "generator_1/while/g_recurr_unit/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/MatMul_4/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/MatMul_4"
  op: "MatMul"
  input: "generator_1/while/g_recurr_unit/MatMul_4/Enter"
  input: "generator_1/while/g_recurr_unit/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/mul"
  op: "Mul"
  input: "generator_1/while/g_recurr_unit/Sigmoid"
  input: "generator_1/while/g_recurr_unit/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/MatMul_5/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/MatMul_5"
  op: "MatMul"
  input: "generator_1/while/g_recurr_unit/MatMul_5/Enter"
  input: "generator_1/while/g_recurr_unit/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/add_2"
  op: "Add"
  input: "generator_1/while/g_recurr_unit/MatMul_4"
  input: "generator_1/while/g_recurr_unit/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/Tanh"
  op: "Tanh"
  input: "generator_1/while/g_recurr_unit/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/sub/x"
  op: "Const"
  input: "^generator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/sub"
  op: "Sub"
  input: "generator_1/while/g_recurr_unit/sub/x"
  input: "generator_1/while/g_recurr_unit/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/mul_1"
  op: "Mul"
  input: "generator_1/while/g_recurr_unit/sub"
  input: "generator_1/while/g_recurr_unit/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/mul_2"
  op: "Mul"
  input: "generator_1/while/g_recurr_unit/Sigmoid_1"
  input: "generator_1/while/g_recurr_unit/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/add_3"
  op: "Add"
  input: "generator_1/while/g_recurr_unit/mul_1"
  input: "generator_1/while/g_recurr_unit/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/Reshape_2/shape"
  op: "Const"
  input: "^generator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 70
      }
    }
  }
}
node {
  name: "generator_1/while/g_recurr_unit/Reshape_2"
  op: "Reshape"
  input: "generator_1/while/g_recurr_unit/add_3"
  input: "generator_1/while/g_recurr_unit/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/Reshape/shape"
  op: "Const"
  input: "^generator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/Reshape"
  op: "Reshape"
  input: "generator_1/while/g_recurr_unit/Reshape_2"
  input: "generator_1/while/g_output_unit/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/MatMul/Enter"
  op: "Enter"
  input: "generator/generator/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/MatMul"
  op: "MatMul"
  input: "generator_1/while/g_output_unit/MatMul/Enter"
  input: "generator_1/while/g_output_unit/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/add/Enter"
  op: "Enter"
  input: "generator/generator/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/add"
  op: "Add"
  input: "generator_1/while/g_output_unit/add/Enter"
  input: "generator_1/while/g_output_unit/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/Tanh"
  op: "Tanh"
  input: "generator_1/while/g_output_unit/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/MatMul_1/Enter"
  op: "Enter"
  input: "generator/generator/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/MatMul_1"
  op: "MatMul"
  input: "generator_1/while/g_output_unit/MatMul_1/Enter"
  input: "generator_1/while/g_output_unit/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/add_1/Enter"
  op: "Enter"
  input: "generator/generator/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/add_1"
  op: "Add"
  input: "generator_1/while/g_output_unit/add_1/Enter"
  input: "generator_1/while/g_output_unit/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/Reshape_1/shape"
  op: "Const"
  input: "^generator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000$\000\000\000"
      }
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/Reshape_1"
  op: "Reshape"
  input: "generator_1/while/g_output_unit/add_1"
  input: "generator_1/while/g_output_unit/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/Softmax"
  op: "Softmax"
  input: "generator_1/while/g_output_unit/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/Reshape_2/shape"
  op: "Const"
  input: "^generator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 36
      }
    }
  }
}
node {
  name: "generator_1/while/g_output_unit/Reshape_2"
  op: "Reshape"
  input: "generator_1/while/g_output_unit/Softmax"
  input: "generator_1/while/g_output_unit/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "samples_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@samples_1/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "samples_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@samples_1/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "generator_1/while/TensorArrayReadV3/Enter"
  input: "generator_1/while/Identity"
  input: "generator_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@samples_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/Const"
  op: "Const"
  input: "^generator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 36
          }
          dim {
            size: 36
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "generator_1/while/Reshape/shape"
  op: "Const"
  input: "^generator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator_1/while/Reshape"
  op: "Reshape"
  input: "generator_1/while/g_output_unit/Reshape_2"
  input: "generator_1/while/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_1/while/MatMul"
  op: "MatMul"
  input: "generator_1/while/Const"
  input: "generator_1/while/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_1/while/Reshape_1/shape"
  op: "Const"
  input: "^generator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 36
      }
    }
  }
}
node {
  name: "generator_1/while/Reshape_1"
  op: "Reshape"
  input: "generator_1/while/MatMul"
  input: "generator_1/while/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_1/while/tokens/Less"
  op: "Less"
  input: "generator_1/while/TensorArrayReadV3"
  input: "generator_1/while/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/tokens/Where"
  op: "Where"
  input: "generator_1/while/tokens/Less"
}
node {
  name: "generator_1/while/tokens/Const"
  op: "Const"
  input: "^generator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator_1/while/tokens/Min"
  op: "Min"
  input: "generator_1/while/tokens/Where"
  input: "generator_1/while/tokens/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_1/while/tokens/ToInt32"
  op: "Cast"
  input: "generator_1/while/tokens/Min"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "generator_1/while/Print"
  op: "Print"
  input: "generator_1/while/tokens/ToInt32"
  input: "generator_1/while/tokens/ToInt32"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "U"
    value {
      list {
        type: DT_INT32
      }
    }
  }
  attr {
    key: "first_n"
    value {
      i: -1
    }
  }
  attr {
    key: "message"
    value {
      s: "Next token is: "
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "generator_1/while/Gather"
  op: "Gather"
  input: "generator_1/while/g_output_unit/MatMul_1/Enter"
  input: "generator_1/while/tokens/ToInt32"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "generator_1/while/Gather_1"
  op: "Gather"
  input: "generator_1/while/g_output_unit/Reshape_2"
  input: "generator_1/while/tokens/ToInt32"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "generator_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "gens/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "generator_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "generator_1/while/Identity"
  input: "generator_1/while/Gather_1"
  input: "generator_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
}
node {
  name: "generator_1/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "gens/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_1/while/TensorArrayWrite_1/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "generator_1/while/TensorArrayWrite_1/TensorArrayWriteV3/Enter"
  input: "generator_1/while/Identity"
  input: "generator_1/while/tokens/ToInt32"
  input: "generator_1/while/Identity_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray_1"
      }
    }
  }
}
node {
  name: "generator_1/while/add/y"
  op: "Const"
  input: "^generator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_1/while/add"
  op: "Add"
  input: "generator_1/while/Identity"
  input: "generator_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_1/while/NextIteration"
  op: "NextIteration"
  input: "generator_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_1/while/NextIteration_1"
  op: "NextIteration"
  input: "generator_1/while/Gather"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/NextIteration_2"
  op: "NextIteration"
  input: "generator_1/while/g_recurr_unit/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/NextIteration_3"
  op: "NextIteration"
  input: "generator_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/NextIteration_4"
  op: "NextIteration"
  input: "generator_1/while/TensorArrayWrite_1/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/Exit"
  op: "Exit"
  input: "generator_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_1/while/Exit_1"
  op: "Exit"
  input: "generator_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/Exit_2"
  op: "Exit"
  input: "generator_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/Exit_3"
  op: "Exit"
  input: "generator_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_1/while/Exit_4"
  op: "Exit"
  input: "generator_1/while/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "predictions/TensorArray/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "predictions/TensorArray"
  op: "TensorArrayV3"
  input: "predictions/TensorArray/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "predictions/TensorArray_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "predictions/TensorArray_1"
  op: "TensorArrayV3"
  input: "predictions/TensorArray_1/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generations/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "gens/TensorArray_1"
  input: "generator_1/while/Exit_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray_1"
      }
    }
  }
}
node {
  name: "generations/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generations/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generations/TensorArrayStack/range"
  op: "Range"
  input: "generations/TensorArrayStack/range/start"
  input: "generations/TensorArrayStack/TensorArraySizeV3"
  input: "generations/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray_1"
      }
    }
  }
}
node {
  name: "generations/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gens/TensorArray_1"
  input: "generations/TensorArrayStack/range"
  input: "generator_1/while/Exit_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "embeddings/Gather"
  op: "Gather"
  input: "discriminator/discriminator/Variable/read"
  input: "generations/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "embeddings/TensorArray/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "embeddings/TensorArray"
  op: "TensorArrayV3"
  input: "embeddings/TensorArray/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "embeddings/Gather"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "embeddings/TensorArrayUnstack/Shape"
  input: "embeddings/TensorArrayUnstack/strided_slice/stack"
  input: "embeddings/TensorArrayUnstack/strided_slice/stack_1"
  input: "embeddings/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack/range"
  op: "Range"
  input: "embeddings/TensorArrayUnstack/range/start"
  input: "embeddings/TensorArrayUnstack/strided_slice"
  input: "embeddings/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "embeddings/TensorArray"
  input: "embeddings/TensorArrayUnstack/range"
  input: "embeddings/Gather"
  input: "embeddings/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
}
node {
  name: "embeddings/Gather_1"
  op: "Gather"
  input: "discriminator/discriminator/Variable/read"
  input: "input/Placeholder"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "embeddings/TensorArray_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "embeddings/TensorArray_1"
  op: "TensorArrayV3"
  input: "embeddings/TensorArray_1/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack_1/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack_1/strided_slice"
  op: "StridedSlice"
  input: "embeddings/TensorArrayUnstack_1/Shape"
  input: "embeddings/TensorArrayUnstack_1/strided_slice/stack"
  input: "embeddings/TensorArrayUnstack_1/strided_slice/stack_1"
  input: "embeddings/TensorArrayUnstack_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack_1/range"
  op: "Range"
  input: "embeddings/TensorArrayUnstack_1/range/start"
  input: "embeddings/TensorArrayUnstack_1/strided_slice"
  input: "embeddings/TensorArrayUnstack_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "embeddings/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "embeddings/TensorArray_1"
  input: "embeddings/TensorArrayUnstack_1/range"
  input: "embeddings/Gather_1"
  input: "embeddings/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
}
node {
  name: "discriminator_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "discriminator_1/while/Enter"
  op: "Enter"
  input: "discriminator_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while/Enter_1"
  op: "Enter"
  input: "embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while/Enter_2"
  op: "Enter"
  input: "discriminator/discriminator/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while/Enter_3"
  op: "Enter"
  input: "predictions/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while/Merge"
  op: "Merge"
  input: "discriminator_1/while/Enter"
  input: "discriminator_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while/Merge_1"
  op: "Merge"
  input: "discriminator_1/while/Enter_1"
  input: "discriminator_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/Merge_2"
  op: "Merge"
  input: "discriminator_1/while/Enter_2"
  input: "discriminator_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/Merge_3"
  op: "Merge"
  input: "discriminator_1/while/Enter_3"
  input: "discriminator_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/Less/y"
  op: "Const"
  input: "^discriminator_1/while/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "discriminator_1/while/Less"
  op: "Less"
  input: "discriminator_1/while/Merge"
  input: "discriminator_1/while/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while/LoopCond"
  op: "LoopCond"
  input: "discriminator_1/while/Less"
}
node {
  name: "discriminator_1/while/Switch"
  op: "Switch"
  input: "discriminator_1/while/Merge"
  input: "discriminator_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Merge"
      }
    }
  }
}
node {
  name: "discriminator_1/while/Switch_1"
  op: "Switch"
  input: "discriminator_1/while/Merge_1"
  input: "discriminator_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "discriminator_1/while/Switch_2"
  op: "Switch"
  input: "discriminator_1/while/Merge_2"
  input: "discriminator_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "discriminator_1/while/Switch_3"
  op: "Switch"
  input: "discriminator_1/while/Merge_3"
  input: "discriminator_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "discriminator_1/while/Identity"
  op: "Identity"
  input: "discriminator_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while/Identity_1"
  op: "Identity"
  input: "discriminator_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/Identity_2"
  op: "Identity"
  input: "discriminator_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/Identity_3"
  op: "Identity"
  input: "discriminator_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "embeddings/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "discriminator_1/while/TensorArrayReadV3/Enter"
  input: "discriminator_1/while/Identity"
  input: "discriminator_1/while/Identity_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/Reshape/shape"
  op: "Const"
  input: "^discriminator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/Reshape"
  op: "Reshape"
  input: "discriminator_1/while/TensorArrayReadV3"
  input: "discriminator_1/while/d_recurr_unit/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/Reshape_1/shape"
  op: "Const"
  input: "^discriminator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/Reshape_1"
  op: "Reshape"
  input: "discriminator_1/while/Identity_2"
  input: "discriminator_1/while/d_recurr_unit/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/MatMul/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/MatMul"
  op: "MatMul"
  input: "discriminator_1/while/d_recurr_unit/MatMul/Enter"
  input: "discriminator_1/while/d_recurr_unit/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/MatMul_1"
  op: "MatMul"
  input: "discriminator_1/while/d_recurr_unit/MatMul_1/Enter"
  input: "discriminator_1/while/d_recurr_unit/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/add"
  op: "Add"
  input: "discriminator_1/while/d_recurr_unit/MatMul"
  input: "discriminator_1/while/d_recurr_unit/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/Sigmoid"
  op: "Sigmoid"
  input: "discriminator_1/while/d_recurr_unit/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/MatMul_2/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/MatMul_2"
  op: "MatMul"
  input: "discriminator_1/while/d_recurr_unit/MatMul_2/Enter"
  input: "discriminator_1/while/d_recurr_unit/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/MatMul_3/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/MatMul_3"
  op: "MatMul"
  input: "discriminator_1/while/d_recurr_unit/MatMul_3/Enter"
  input: "discriminator_1/while/d_recurr_unit/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/add_1"
  op: "Add"
  input: "discriminator_1/while/d_recurr_unit/MatMul_2"
  input: "discriminator_1/while/d_recurr_unit/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/Sigmoid_1"
  op: "Sigmoid"
  input: "discriminator_1/while/d_recurr_unit/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/MatMul_4/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/MatMul_4"
  op: "MatMul"
  input: "discriminator_1/while/d_recurr_unit/MatMul_4/Enter"
  input: "discriminator_1/while/d_recurr_unit/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/mul"
  op: "Mul"
  input: "discriminator_1/while/d_recurr_unit/Sigmoid"
  input: "discriminator_1/while/d_recurr_unit/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/MatMul_5/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/MatMul_5"
  op: "MatMul"
  input: "discriminator_1/while/d_recurr_unit/MatMul_5/Enter"
  input: "discriminator_1/while/d_recurr_unit/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/add_2"
  op: "Add"
  input: "discriminator_1/while/d_recurr_unit/MatMul_4"
  input: "discriminator_1/while/d_recurr_unit/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/Tanh"
  op: "Tanh"
  input: "discriminator_1/while/d_recurr_unit/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/sub/x"
  op: "Const"
  input: "^discriminator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/sub"
  op: "Sub"
  input: "discriminator_1/while/d_recurr_unit/sub/x"
  input: "discriminator_1/while/d_recurr_unit/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/mul_1"
  op: "Mul"
  input: "discriminator_1/while/d_recurr_unit/sub"
  input: "discriminator_1/while/d_recurr_unit/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/mul_2"
  op: "Mul"
  input: "discriminator_1/while/d_recurr_unit/Sigmoid_1"
  input: "discriminator_1/while/d_recurr_unit/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/add_3"
  op: "Add"
  input: "discriminator_1/while/d_recurr_unit/mul_1"
  input: "discriminator_1/while/d_recurr_unit/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/Reshape_2/shape"
  op: "Const"
  input: "^discriminator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 70
      }
    }
  }
}
node {
  name: "discriminator_1/while/d_recurr_unit/Reshape_2"
  op: "Reshape"
  input: "discriminator_1/while/d_recurr_unit/add_3"
  input: "discriminator_1/while/d_recurr_unit/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while/d_class_unit/Reshape/shape"
  op: "Const"
  input: "^discriminator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_1/while/d_class_unit/Reshape"
  op: "Reshape"
  input: "discriminator_1/while/d_recurr_unit/Reshape_2"
  input: "discriminator_1/while/d_class_unit/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while/d_class_unit/MatMul/Enter"
  op: "Enter"
  input: "discriminator/discriminator/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while/d_class_unit/MatMul"
  op: "MatMul"
  input: "discriminator_1/while/d_class_unit/MatMul/Enter"
  input: "discriminator_1/while/d_class_unit/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_1/while/d_class_unit/add/Enter"
  op: "Enter"
  input: "discriminator/discriminator/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while/d_class_unit/add"
  op: "Add"
  input: "discriminator_1/while/d_class_unit/add/Enter"
  input: "discriminator_1/while/d_class_unit/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "predictions/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "discriminator_1/while/Identity"
  input: "discriminator_1/while/d_class_unit/add"
  input: "discriminator_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
}
node {
  name: "discriminator_1/while/add/y"
  op: "Const"
  input: "^discriminator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_1/while/add"
  op: "Add"
  input: "discriminator_1/while/Identity"
  input: "discriminator_1/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while/NextIteration"
  op: "NextIteration"
  input: "discriminator_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while/NextIteration_1"
  op: "NextIteration"
  input: "discriminator_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/NextIteration_2"
  op: "NextIteration"
  input: "discriminator_1/while/d_recurr_unit/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/NextIteration_3"
  op: "NextIteration"
  input: "discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/Exit"
  op: "Exit"
  input: "discriminator_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while/Exit_1"
  op: "Exit"
  input: "discriminator_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/Exit_2"
  op: "Exit"
  input: "discriminator_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while/Exit_3"
  op: "Exit"
  input: "discriminator_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/predictions/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "predictions/TensorArray"
  input: "discriminator_1/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
}
node {
  name: "discriminator_1/predictions/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "discriminator_1/predictions/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_1/predictions/TensorArrayStack/range"
  op: "Range"
  input: "discriminator_1/predictions/TensorArrayStack/range/start"
  input: "discriminator_1/predictions/TensorArrayStack/TensorArraySizeV3"
  input: "discriminator_1/predictions/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
}
node {
  name: "discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "predictions/TensorArray"
  input: "discriminator_1/predictions/TensorArrayStack/range"
  input: "discriminator_1/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "discriminator_1/predictions/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "discriminator_1/predictions/Reshape"
  op: "Reshape"
  input: "discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3"
  input: "discriminator_1/predictions/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "discriminator_1/while_1/Enter"
  op: "Enter"
  input: "discriminator_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while_1/Enter_1"
  op: "Enter"
  input: "embeddings/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while_1/Enter_2"
  op: "Enter"
  input: "discriminator/discriminator/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while_1/Enter_3"
  op: "Enter"
  input: "predictions/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while_1/Merge"
  op: "Merge"
  input: "discriminator_1/while_1/Enter"
  input: "discriminator_1/while_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while_1/Merge_1"
  op: "Merge"
  input: "discriminator_1/while_1/Enter_1"
  input: "discriminator_1/while_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/Merge_2"
  op: "Merge"
  input: "discriminator_1/while_1/Enter_2"
  input: "discriminator_1/while_1/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/Merge_3"
  op: "Merge"
  input: "discriminator_1/while_1/Enter_3"
  input: "discriminator_1/while_1/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/Less/y"
  op: "Const"
  input: "^discriminator_1/while_1/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "discriminator_1/while_1/Less"
  op: "Less"
  input: "discriminator_1/while_1/Merge"
  input: "discriminator_1/while_1/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while_1/LoopCond"
  op: "LoopCond"
  input: "discriminator_1/while_1/Less"
}
node {
  name: "discriminator_1/while_1/Switch"
  op: "Switch"
  input: "discriminator_1/while_1/Merge"
  input: "discriminator_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/Merge"
      }
    }
  }
}
node {
  name: "discriminator_1/while_1/Switch_1"
  op: "Switch"
  input: "discriminator_1/while_1/Merge_1"
  input: "discriminator_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/Merge_1"
      }
    }
  }
}
node {
  name: "discriminator_1/while_1/Switch_2"
  op: "Switch"
  input: "discriminator_1/while_1/Merge_2"
  input: "discriminator_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/Merge_2"
      }
    }
  }
}
node {
  name: "discriminator_1/while_1/Switch_3"
  op: "Switch"
  input: "discriminator_1/while_1/Merge_3"
  input: "discriminator_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/Merge_3"
      }
    }
  }
}
node {
  name: "discriminator_1/while_1/Identity"
  op: "Identity"
  input: "discriminator_1/while_1/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while_1/Identity_1"
  op: "Identity"
  input: "discriminator_1/while_1/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/Identity_2"
  op: "Identity"
  input: "discriminator_1/while_1/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/Identity_3"
  op: "Identity"
  input: "discriminator_1/while_1/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "embeddings/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "discriminator_1/while_1/TensorArrayReadV3/Enter"
  input: "discriminator_1/while_1/Identity"
  input: "discriminator_1/while_1/Identity_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/Reshape/shape"
  op: "Const"
  input: "^discriminator_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/Reshape"
  op: "Reshape"
  input: "discriminator_1/while_1/TensorArrayReadV3"
  input: "discriminator_1/while_1/d_recurr_unit/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/Reshape_1/shape"
  op: "Const"
  input: "^discriminator_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/Reshape_1"
  op: "Reshape"
  input: "discriminator_1/while_1/Identity_2"
  input: "discriminator_1/while_1/d_recurr_unit/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/MatMul/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/MatMul"
  op: "MatMul"
  input: "discriminator_1/while_1/d_recurr_unit/MatMul/Enter"
  input: "discriminator_1/while_1/d_recurr_unit/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/MatMul_1"
  op: "MatMul"
  input: "discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter"
  input: "discriminator_1/while_1/d_recurr_unit/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/add"
  op: "Add"
  input: "discriminator_1/while_1/d_recurr_unit/MatMul"
  input: "discriminator_1/while_1/d_recurr_unit/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/Sigmoid"
  op: "Sigmoid"
  input: "discriminator_1/while_1/d_recurr_unit/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/MatMul_2"
  op: "MatMul"
  input: "discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter"
  input: "discriminator_1/while_1/d_recurr_unit/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/MatMul_3"
  op: "MatMul"
  input: "discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter"
  input: "discriminator_1/while_1/d_recurr_unit/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/add_1"
  op: "Add"
  input: "discriminator_1/while_1/d_recurr_unit/MatMul_2"
  input: "discriminator_1/while_1/d_recurr_unit/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/Sigmoid_1"
  op: "Sigmoid"
  input: "discriminator_1/while_1/d_recurr_unit/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/MatMul_4"
  op: "MatMul"
  input: "discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter"
  input: "discriminator_1/while_1/d_recurr_unit/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/mul"
  op: "Mul"
  input: "discriminator_1/while_1/d_recurr_unit/Sigmoid"
  input: "discriminator_1/while_1/d_recurr_unit/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/MatMul_5"
  op: "MatMul"
  input: "discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter"
  input: "discriminator_1/while_1/d_recurr_unit/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/add_2"
  op: "Add"
  input: "discriminator_1/while_1/d_recurr_unit/MatMul_4"
  input: "discriminator_1/while_1/d_recurr_unit/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/Tanh"
  op: "Tanh"
  input: "discriminator_1/while_1/d_recurr_unit/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/sub/x"
  op: "Const"
  input: "^discriminator_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/sub"
  op: "Sub"
  input: "discriminator_1/while_1/d_recurr_unit/sub/x"
  input: "discriminator_1/while_1/d_recurr_unit/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/mul_1"
  op: "Mul"
  input: "discriminator_1/while_1/d_recurr_unit/sub"
  input: "discriminator_1/while_1/d_recurr_unit/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/mul_2"
  op: "Mul"
  input: "discriminator_1/while_1/d_recurr_unit/Sigmoid_1"
  input: "discriminator_1/while_1/d_recurr_unit/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/add_3"
  op: "Add"
  input: "discriminator_1/while_1/d_recurr_unit/mul_1"
  input: "discriminator_1/while_1/d_recurr_unit/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/Reshape_2/shape"
  op: "Const"
  input: "^discriminator_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 70
      }
    }
  }
}
node {
  name: "discriminator_1/while_1/d_recurr_unit/Reshape_2"
  op: "Reshape"
  input: "discriminator_1/while_1/d_recurr_unit/add_3"
  input: "discriminator_1/while_1/d_recurr_unit/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while_1/d_class_unit/Reshape/shape"
  op: "Const"
  input: "^discriminator_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_1/while_1/d_class_unit/Reshape"
  op: "Reshape"
  input: "discriminator_1/while_1/d_recurr_unit/Reshape_2"
  input: "discriminator_1/while_1/d_class_unit/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while_1/d_class_unit/MatMul/Enter"
  op: "Enter"
  input: "discriminator/discriminator/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while_1/d_class_unit/MatMul"
  op: "MatMul"
  input: "discriminator_1/while_1/d_class_unit/MatMul/Enter"
  input: "discriminator_1/while_1/d_class_unit/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_1/while_1/d_class_unit/add/Enter"
  op: "Enter"
  input: "discriminator/discriminator/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while_1/d_class_unit/add"
  op: "Add"
  input: "discriminator_1/while_1/d_class_unit/add/Enter"
  input: "discriminator_1/while_1/d_class_unit/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "predictions/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "discriminator_1/while_1/Identity"
  input: "discriminator_1/while_1/d_class_unit/add"
  input: "discriminator_1/while_1/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
}
node {
  name: "discriminator_1/while_1/add/y"
  op: "Const"
  input: "^discriminator_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_1/while_1/add"
  op: "Add"
  input: "discriminator_1/while_1/Identity"
  input: "discriminator_1/while_1/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while_1/NextIteration"
  op: "NextIteration"
  input: "discriminator_1/while_1/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while_1/NextIteration_1"
  op: "NextIteration"
  input: "discriminator_1/while_1/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/NextIteration_2"
  op: "NextIteration"
  input: "discriminator_1/while_1/d_recurr_unit/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/NextIteration_3"
  op: "NextIteration"
  input: "discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/Exit"
  op: "Exit"
  input: "discriminator_1/while_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/while_1/Exit_1"
  op: "Exit"
  input: "discriminator_1/while_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/Exit_2"
  op: "Exit"
  input: "discriminator_1/while_1/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/while_1/Exit_3"
  op: "Exit"
  input: "discriminator_1/while_1/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "discriminator_1/predictions_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "predictions/TensorArray_1"
  input: "discriminator_1/while_1/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
}
node {
  name: "discriminator_1/predictions_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "discriminator_1/predictions_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_1/predictions_1/TensorArrayStack/range"
  op: "Range"
  input: "discriminator_1/predictions_1/TensorArrayStack/range/start"
  input: "discriminator_1/predictions_1/TensorArrayStack/TensorArraySizeV3"
  input: "discriminator_1/predictions_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
}
node {
  name: "discriminator_1/predictions_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "predictions/TensorArray_1"
  input: "discriminator_1/predictions_1/TensorArrayStack/range"
  input: "discriminator_1/while_1/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 1
        }
      }
    }
  }
}
node {
  name: "discriminator_1/predictions_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "discriminator_1/predictions_1/Reshape"
  op: "Reshape"
  input: "discriminator_1/predictions_1/TensorArrayStack/TensorArrayGatherV3"
  input: "discriminator_1/predictions_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_1/predictions_1/TensorArray/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "discriminator_1/predictions_1/TensorArray"
  op: "TensorArrayV3"
  input: "discriminator_1/predictions_1/TensorArray/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "embeddings_1/Gather"
  op: "Gather"
  input: "generator/generator/Variable/read"
  input: "input/Placeholder"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "embeddings_1/TensorArray/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "embeddings_1/TensorArray"
  op: "TensorArrayV3"
  input: "embeddings_1/TensorArray/size"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "embeddings_1/TensorArrayUnstack/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "embeddings_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "embeddings_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "embeddings_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "embeddings_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "embeddings_1/TensorArrayUnstack/Shape"
  input: "embeddings_1/TensorArrayUnstack/strided_slice/stack"
  input: "embeddings_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "embeddings_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "embeddings_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "embeddings_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "embeddings_1/TensorArrayUnstack/range"
  op: "Range"
  input: "embeddings_1/TensorArrayUnstack/range/start"
  input: "embeddings_1/TensorArrayUnstack/strided_slice"
  input: "embeddings_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "embeddings_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "embeddings_1/TensorArray"
  input: "embeddings_1/TensorArrayUnstack/range"
  input: "embeddings_1/Gather"
  input: "embeddings_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings_1/TensorArray"
      }
    }
  }
}
node {
  name: "generator_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator_2/Gather"
  op: "Gather"
  input: "generator/generator/Variable/read"
  input: "tokens/Const"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "generator_2/while/Enter"
  op: "Enter"
  input: "generator_2/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/Enter_1"
  op: "Enter"
  input: "generator_2/Gather"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/Enter_2"
  op: "Enter"
  input: "h/Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/Enter_3"
  op: "Enter"
  input: "discriminator_1/predictions_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/Merge"
  op: "Merge"
  input: "generator_2/while/Enter"
  input: "generator_2/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_2/while/Merge_1"
  op: "Merge"
  input: "generator_2/while/Enter_1"
  input: "generator_2/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Merge_2"
  op: "Merge"
  input: "generator_2/while/Enter_2"
  input: "generator_2/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Merge_3"
  op: "Merge"
  input: "generator_2/while/Enter_3"
  input: "generator_2/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Less/y"
  op: "Const"
  input: "^generator_2/while/Merge"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "generator_2/while/Less"
  op: "Less"
  input: "generator_2/while/Merge"
  input: "generator_2/while/Less/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_2/while/LoopCond"
  op: "LoopCond"
  input: "generator_2/while/Less"
}
node {
  name: "generator_2/while/Switch"
  op: "Switch"
  input: "generator_2/while/Merge"
  input: "generator_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Merge"
      }
    }
  }
}
node {
  name: "generator_2/while/Switch_1"
  op: "Switch"
  input: "generator_2/while/Merge_1"
  input: "generator_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Merge_1"
      }
    }
  }
}
node {
  name: "generator_2/while/Switch_2"
  op: "Switch"
  input: "generator_2/while/Merge_2"
  input: "generator_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Merge_2"
      }
    }
  }
}
node {
  name: "generator_2/while/Switch_3"
  op: "Switch"
  input: "generator_2/while/Merge_3"
  input: "generator_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Merge_3"
      }
    }
  }
}
node {
  name: "generator_2/while/Identity"
  op: "Identity"
  input: "generator_2/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_2/while/Identity_1"
  op: "Identity"
  input: "generator_2/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Identity_2"
  op: "Identity"
  input: "generator_2/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Identity_3"
  op: "Identity"
  input: "generator_2/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Reshape/shape"
  op: "Const"
  input: "^generator_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator_2/while/Reshape"
  op: "Reshape"
  input: "generator_2/while/Identity_1"
  input: "generator_2/while/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_2/while/Reshape_1/shape"
  op: "Const"
  input: "^generator_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator_2/while/Reshape_1"
  op: "Reshape"
  input: "generator_2/while/Identity_2"
  input: "generator_2/while/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_2/while/MatMul/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/MatMul"
  op: "MatMul"
  input: "generator_2/while/MatMul/Enter"
  input: "generator_2/while/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_2/while/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/MatMul_1"
  op: "MatMul"
  input: "generator_2/while/MatMul_1/Enter"
  input: "generator_2/while/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_2/while/add"
  op: "Add"
  input: "generator_2/while/MatMul"
  input: "generator_2/while/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Sigmoid"
  op: "Sigmoid"
  input: "generator_2/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/MatMul_2/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/MatMul_2"
  op: "MatMul"
  input: "generator_2/while/MatMul_2/Enter"
  input: "generator_2/while/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_2/while/MatMul_3/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/MatMul_3"
  op: "MatMul"
  input: "generator_2/while/MatMul_3/Enter"
  input: "generator_2/while/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_2/while/add_1"
  op: "Add"
  input: "generator_2/while/MatMul_2"
  input: "generator_2/while/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Sigmoid_1"
  op: "Sigmoid"
  input: "generator_2/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/MatMul_4/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/MatMul_4"
  op: "MatMul"
  input: "generator_2/while/MatMul_4/Enter"
  input: "generator_2/while/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_2/while/mul"
  op: "Mul"
  input: "generator_2/while/Sigmoid"
  input: "generator_2/while/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/MatMul_5/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/MatMul_5"
  op: "MatMul"
  input: "generator_2/while/MatMul_5/Enter"
  input: "generator_2/while/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_2/while/add_2"
  op: "Add"
  input: "generator_2/while/MatMul_4"
  input: "generator_2/while/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Tanh"
  op: "Tanh"
  input: "generator_2/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/sub/x"
  op: "Const"
  input: "^generator_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator_2/while/sub"
  op: "Sub"
  input: "generator_2/while/sub/x"
  input: "generator_2/while/Sigmoid_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/mul_1"
  op: "Mul"
  input: "generator_2/while/sub"
  input: "generator_2/while/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/mul_2"
  op: "Mul"
  input: "generator_2/while/Sigmoid_1"
  input: "generator_2/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/add_3"
  op: "Add"
  input: "generator_2/while/mul_1"
  input: "generator_2/while/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Reshape_2/shape"
  op: "Const"
  input: "^generator_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 70
      }
    }
  }
}
node {
  name: "generator_2/while/Reshape_2"
  op: "Reshape"
  input: "generator_2/while/add_3"
  input: "generator_2/while/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_2/while/Reshape_3/shape"
  op: "Const"
  input: "^generator_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator_2/while/Reshape_3"
  op: "Reshape"
  input: "generator_2/while/Reshape_2"
  input: "generator_2/while/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_2/while/MatMul_6/Enter"
  op: "Enter"
  input: "generator/generator/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/MatMul_6"
  op: "MatMul"
  input: "generator_2/while/MatMul_6/Enter"
  input: "generator_2/while/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_2/while/add_4/Enter"
  op: "Enter"
  input: "generator/generator/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/add_4"
  op: "Add"
  input: "generator_2/while/add_4/Enter"
  input: "generator_2/while/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Tanh_1"
  op: "Tanh"
  input: "generator_2/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/MatMul_7/Enter"
  op: "Enter"
  input: "generator/generator/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/MatMul_7"
  op: "MatMul"
  input: "generator_2/while/MatMul_7/Enter"
  input: "generator_2/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "generator_2/while/add_5/Enter"
  op: "Enter"
  input: "generator/generator/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/add_5"
  op: "Add"
  input: "generator_2/while/add_5/Enter"
  input: "generator_2/while/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Reshape_4/shape"
  op: "Const"
  input: "^generator_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000$\000\000\000"
      }
    }
  }
}
node {
  name: "generator_2/while/Reshape_4"
  op: "Reshape"
  input: "generator_2/while/add_5"
  input: "generator_2/while/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_2/while/Softmax"
  op: "Softmax"
  input: "generator_2/while/Reshape_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Reshape_5/shape"
  op: "Const"
  input: "^generator_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 36
      }
    }
  }
}
node {
  name: "generator_2/while/Reshape_5"
  op: "Reshape"
  input: "generator_2/while/Softmax"
  input: "generator_2/while/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "discriminator_1/predictions_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "generator_2/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "generator_2/while/Identity"
  input: "generator_2/while/Reshape_5"
  input: "generator_2/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
}
node {
  name: "generator_2/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "embeddings_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings_1/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "embeddings_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings_1/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "generator_2/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "generator_2/while/TensorArrayReadV3/Enter"
  input: "generator_2/while/Identity"
  input: "generator_2/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/add_6/y"
  op: "Const"
  input: "^generator_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_2/while/add_6"
  op: "Add"
  input: "generator_2/while/Identity"
  input: "generator_2/while/add_6/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_2/while/NextIteration"
  op: "NextIteration"
  input: "generator_2/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_2/while/NextIteration_1"
  op: "NextIteration"
  input: "generator_2/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/NextIteration_2"
  op: "NextIteration"
  input: "generator_2/while/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/NextIteration_3"
  op: "NextIteration"
  input: "generator_2/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Exit"
  op: "Exit"
  input: "generator_2/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_2/while/Exit_1"
  op: "Exit"
  input: "generator_2/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Exit_2"
  op: "Exit"
  input: "generator_2/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/while/Exit_3"
  op: "Exit"
  input: "generator_2/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "generator_2/predictions/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "discriminator_1/predictions_1/TensorArray"
  input: "generator_2/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
}
node {
  name: "generator_2/predictions/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator_2/predictions/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_2/predictions/TensorArrayStack/range"
  op: "Range"
  input: "generator_2/predictions/TensorArrayStack/range/start"
  input: "generator_2/predictions/TensorArrayStack/TensorArraySizeV3"
  input: "generator_2/predictions/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
}
node {
  name: "generator_2/predictions/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "discriminator_1/predictions_1/TensorArray"
  input: "generator_2/predictions/TensorArrayStack/range"
  input: "generator_2/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 36
        }
      }
    }
  }
}
node {
  name: "generator_2/predictions/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000$\000\000\000"
      }
    }
  }
}
node {
  name: "generator_2/predictions/Reshape"
  op: "Reshape"
  input: "generator_2/predictions/TensorArrayStack/TensorArrayGatherV3"
  input: "generator_2/predictions/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss/logistic_loss/zeros_like"
  op: "ZerosLike"
  input: "discriminator_1/predictions/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "discriminator_1/predictions/Reshape"
  input: "loss/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss/Select"
  op: "Select"
  input: "loss/logistic_loss/GreaterEqual"
  input: "discriminator_1/predictions/Reshape"
  input: "loss/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss/Neg"
  op: "Neg"
  input: "discriminator_1/predictions/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss/Select_1"
  op: "Select"
  input: "loss/logistic_loss/GreaterEqual"
  input: "loss/logistic_loss/Neg"
  input: "discriminator_1/predictions/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss/mul"
  op: "Mul"
  input: "discriminator_1/predictions/Reshape"
  input: "loss/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss/sub"
  op: "Sub"
  input: "loss/logistic_loss/Select"
  input: "loss/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss/Exp"
  op: "Exp"
  input: "loss/logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss/Log1p"
  op: "Log1p"
  input: "loss/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss"
  op: "Add"
  input: "loss/logistic_loss/sub"
  input: "loss/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/Mean"
  op: "Mean"
  input: "loss/logistic_loss"
  input: "loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/ones"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss/logistic_loss_1/zeros_like"
  op: "ZerosLike"
  input: "discriminator_1/predictions_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss_1/GreaterEqual"
  op: "GreaterEqual"
  input: "discriminator_1/predictions_1/Reshape"
  input: "loss/logistic_loss_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss_1/Select"
  op: "Select"
  input: "loss/logistic_loss_1/GreaterEqual"
  input: "discriminator_1/predictions_1/Reshape"
  input: "loss/logistic_loss_1/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss_1/Neg"
  op: "Neg"
  input: "discriminator_1/predictions_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss_1/Select_1"
  op: "Select"
  input: "loss/logistic_loss_1/GreaterEqual"
  input: "loss/logistic_loss_1/Neg"
  input: "discriminator_1/predictions_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss_1/mul"
  op: "Mul"
  input: "discriminator_1/predictions_1/Reshape"
  input: "loss/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss_1/sub"
  op: "Sub"
  input: "loss/logistic_loss_1/Select"
  input: "loss/logistic_loss_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss_1/Exp"
  op: "Exp"
  input: "loss/logistic_loss_1/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss_1/Log1p"
  op: "Log1p"
  input: "loss/logistic_loss_1/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/logistic_loss_1"
  op: "Add"
  input: "loss/logistic_loss_1/sub"
  input: "loss/logistic_loss_1/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/Mean_1"
  op: "Mean"
  input: "loss/logistic_loss_1"
  input: "loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "rewards_1/Log/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "rewards_1/Log"
  op: "Log"
  input: "rewards_1/Log/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rewards_1/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "rewards_1/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "rewards_1/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "rewards_1/range"
  op: "Range"
  input: "rewards_1/range/start"
  input: "rewards_1/range/limit"
  input: "rewards_1/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rewards_1/ToFloat"
  op: "Cast"
  input: "rewards_1/range"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rewards_1/mul"
  op: "Mul"
  input: "rewards_1/Log"
  input: "rewards_1/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rewards_1/Exp"
  op: "Exp"
  input: "rewards_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rewards_1/Sigmoid"
  op: "Sigmoid"
  input: "discriminator_1/predictions/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rewards_1/mul_1"
  op: "Mul"
  input: "rewards_1/Exp"
  input: "rewards_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rewards_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
          dim {
            size: 96
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "rewards_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "rewards_1/Reshape"
  op: "Reshape"
  input: "rewards_1/mul_1"
  input: "rewards_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rewards_1/MatMul"
  op: "MatMul"
  input: "rewards_1/Const"
  input: "rewards_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rewards_1/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "rewards_1/Reshape_1"
  op: "Reshape"
  input: "rewards_1/MatMul"
  input: "rewards_1/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rewards_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 96
          }
          dim {
            size: 96
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "rewards_1/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "rewards_1/Reshape_2"
  op: "Reshape"
  input: "rewards_1/Exp"
  input: "rewards_1/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rewards_1/MatMul_1"
  op: "MatMul"
  input: "rewards_1/Const_1"
  input: "rewards_1/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "rewards_1/Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "rewards_1/Reshape_3"
  op: "Reshape"
  input: "rewards_1/MatMul_1"
  input: "rewards_1/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "rewards_1/truediv"
  op: "RealDiv"
  input: "rewards_1/Reshape_1"
  input: "rewards_1/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "rewards_1/sub"
  op: "Sub"
  input: "rewards_1/truediv"
  input: "rewards/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "loss_1/pow"
  op: "Pow"
  input: "rewards_1/sub"
  input: "loss_1/pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss_1/Mean"
  op: "Mean"
  input: "loss_1/pow"
  input: "loss_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "gens/TensorArray"
  input: "generator_1/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
}
node {
  name: "loss_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss_1/TensorArrayStack/range"
  op: "Range"
  input: "loss_1/TensorArrayStack/range/start"
  input: "loss_1/TensorArrayStack/TensorArraySizeV3"
  input: "loss_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
}
node {
  name: "loss_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gens/TensorArray"
  input: "loss_1/TensorArrayStack/range"
  input: "generator_1/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "loss_1/clip_by_value/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10000000.0
      }
    }
  }
}
node {
  name: "loss_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "loss_1/TensorArrayStack/TensorArrayGatherV3"
  input: "loss_1/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/clip_by_value/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss_1/clip_by_value"
  op: "Maximum"
  input: "loss_1/clip_by_value/Minimum"
  input: "loss_1/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/Log"
  op: "Log"
  input: "loss_1/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/mul"
  op: "Mul"
  input: "loss_1/Log"
  input: "rewards_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss_1/Mean_1"
  op: "Mean"
  input: "loss_1/mul"
  input: "loss_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss_1/Neg"
  op: "Neg"
  input: "loss_1/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/ToInt64"
  op: "Cast"
  input: "input/Placeholder"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss_1/one_hot/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss_1/one_hot/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss_1/one_hot/depth"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 36
      }
    }
  }
}
node {
  name: "loss_1/one_hot/on_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "loss_1/one_hot/off_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "loss_1/one_hot"
  op: "OneHot"
  input: "loss_1/ToInt64"
  input: "loss_1/one_hot/depth"
  input: "loss_1/one_hot/on_value"
  input: "loss_1/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "loss_1/clip_by_value_1/Minimum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 10000000.0
      }
    }
  }
}
node {
  name: "loss_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "generator_2/predictions/Reshape"
  input: "loss_1/clip_by_value_1/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/clip_by_value_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "loss_1/clip_by_value_1"
  op: "Maximum"
  input: "loss_1/clip_by_value_1/Minimum"
  input: "loss_1/clip_by_value_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/Log_1"
  op: "Log"
  input: "loss_1/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/mul_1"
  op: "Mul"
  input: "loss_1/one_hot"
  input: "loss_1/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss_1/Sum"
  op: "Sum"
  input: "loss_1/mul_1"
  input: "loss_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss_1/Neg_1"
  op: "Neg"
  input: "loss_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss_1/truediv/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 96.0
      }
    }
  }
}
node {
  name: "loss_1/truediv"
  op: "RealDiv"
  input: "loss_1/Neg_1"
  input: "loss_1/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "discriminator_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^discriminator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  input: "^gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/StackPush"
  input: "^gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPush"
  input: "^gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/StackPush"
  input: "^gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPush"
  input: "^gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPush"
  input: "^gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPush"
  input: "^gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/StackPush"
  input: "^gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPush"
  input: "^gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPush"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_4"
  op: "Enter"
  input: "gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/Merge_2"
  op: "Merge"
  input: "gradients/f_count_4"
  input: "gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Switch_2"
  op: "Switch"
  input: "gradients/Merge_2"
  input: "generator_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Add_1/y"
  op: "Const"
  input: "^generator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add_1"
  op: "Add"
  input: "gradients/Switch_2:1"
  input: "gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/NextIteration_2"
  op: "NextIteration"
  input: "gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/f_count_5"
  op: "Exit"
  input: "gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_5"
  op: "Enter"
  input: "gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/Merge_3"
  op: "Merge"
  input: "gradients/b_count_5"
  input: "gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "gradients/Merge_3"
  input: "gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count_6"
  op: "LoopCond"
  input: "gradients/GreaterEqual_1"
}
node {
  name: "gradients/Switch_3"
  op: "Switch"
  input: "gradients/Merge_3"
  input: "gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sub_1"
  op: "Sub"
  input: "gradients/Switch_3:1"
  input: "gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/NextIteration_3"
  op: "NextIteration"
  input: "gradients/Sub_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/b_count_7"
  op: "Exit"
  input: "gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/loss/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/loss/Mean_grad/Reshape"
  input: "gradients/loss/Mean_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/loss/Mean_grad/Shape"
  input: "gradients/loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/loss/Mean_grad/Shape_1"
  input: "gradients/loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/loss/Mean_grad/Prod_1"
  input: "gradients/loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/loss/Mean_grad/Prod"
  input: "gradients/loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/loss/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/loss/Mean_grad/Tile"
  input: "gradients/loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/loss/logistic_loss_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients/loss/logistic_loss_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients/loss/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/loss/logistic_loss_grad/Shape"
  input: "gradients/loss/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/logistic_loss_grad/Sum"
  op: "Sum"
  input: "gradients/loss/Mean_grad/truediv"
  input: "gradients/loss/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/loss/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "gradients/loss/logistic_loss_grad/Sum"
  input: "gradients/loss/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "gradients/loss/Mean_grad/truediv"
  input: "gradients/loss/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/loss/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/loss/logistic_loss_grad/Sum_1"
  input: "gradients/loss/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/sub_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/loss/logistic_loss/sub_grad/Shape"
  input: "gradients/loss/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "gradients/loss/logistic_loss_grad/Reshape"
  input: "gradients/loss/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/loss/logistic_loss/sub_grad/Sum"
  input: "gradients/loss/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/loss/logistic_loss_grad/Reshape"
  input: "gradients/loss/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "gradients/loss/logistic_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/loss/logistic_loss/sub_grad/Neg"
  input: "gradients/loss/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^gradients/loss/logistic_loss_grad/Reshape_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "gradients/loss/logistic_loss/Log1p_grad/add/x"
  input: "loss/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients/loss/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "gradients/loss/logistic_loss_grad/Reshape_1"
  input: "gradients/loss/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "discriminator_1/predictions/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "loss/logistic_loss/GreaterEqual"
  input: "gradients/loss/logistic_loss/sub_grad/Reshape"
  input: "gradients/loss/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "loss/logistic_loss/GreaterEqual"
  input: "gradients/loss/logistic_loss/Select_grad/zeros_like"
  input: "gradients/loss/logistic_loss/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/mul_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/loss/logistic_loss/mul_grad/Shape"
  input: "gradients/loss/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/mul_grad/mul"
  op: "Mul"
  input: "gradients/loss/logistic_loss/sub_grad/Reshape_1"
  input: "loss/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "gradients/loss/logistic_loss/mul_grad/mul"
  input: "gradients/loss/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/loss/logistic_loss/mul_grad/Sum"
  input: "gradients/loss/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/mul_grad/mul_1"
  op: "Mul"
  input: "discriminator_1/predictions/Reshape"
  input: "gradients/loss/logistic_loss/sub_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/loss/logistic_loss/mul_grad/mul_1"
  input: "gradients/loss/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/loss/logistic_loss/mul_grad/Sum_1"
  input: "gradients/loss/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "gradients/loss/logistic_loss/Log1p_grad/mul"
  input: "loss/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "loss/logistic_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "loss/logistic_loss/GreaterEqual"
  input: "gradients/loss/logistic_loss/Exp_grad/mul"
  input: "gradients/loss/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "loss/logistic_loss/GreaterEqual"
  input: "gradients/loss/logistic_loss/Select_1_grad/zeros_like"
  input: "gradients/loss/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/loss/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "gradients/loss/logistic_loss/Select_1_grad/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/loss/logistic_loss/Select_grad/Select"
  input: "gradients/loss/logistic_loss/mul_grad/Reshape"
  input: "gradients/loss/logistic_loss/Select_1_grad/Select_1"
  input: "gradients/loss/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/loss/logistic_loss/Select_grad/Select"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/predictions/Reshape_grad/Shape"
  op: "Shape"
  input: "discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/predictions/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN"
  input: "gradients/discriminator_1/predictions/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "predictions/TensorArray"
  input: "discriminator_1/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "discriminator_1/while/Exit_3"
  input: "^gradients/discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients/discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "discriminator_1/predictions/TensorArrayStack/range"
  input: "gradients/discriminator_1/predictions/Reshape_grad/Reshape"
  input: "gradients/discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
}
node {
  name: "gradients/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/discriminator_1/while/Exit_3_grad/b_exit"
  input: "gradients/discriminator_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients/discriminator_1/while/Exit_1_grad/b_exit"
  input: "gradients/discriminator_1/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/discriminator_1/while/Exit_2_grad/b_exit"
  input: "gradients/discriminator_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/discriminator_1/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/discriminator_1/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients/discriminator_1/while/Switch_1_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/discriminator_1/while/Switch_1_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/discriminator_1/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/discriminator_1/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients/discriminator_1/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/discriminator_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "predictions/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/discriminator_1/while/Merge_3_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/discriminator_1/while/Merge_3_grad/Switch:1"
  input: "^gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity"
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity"
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  op: "StackPush"
  input: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  input: "discriminator_1/while/Identity"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity"
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity"
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  op: "StackPop"
  input: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity"
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "^gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/StackPop"
  input: "^gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop"
  input: "^gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/StackPop"
  input: "^gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPop"
  input: "^gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPop"
  input: "^gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  input: "^gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/StackPop"
  input: "^gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPop"
  input: "^gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "embeddings/TensorArray"
  input: "gradients/discriminator_1/while/Enter_1_grad/Exit"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/discriminator_1/while/Enter_1_grad/Exit"
  input: "^gradients/embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
}
node {
  name: "gradients/embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "embeddings/TensorArrayUnstack/range"
  input: "gradients/embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/discriminator_1/while/d_class_unit/add_grad/Shape"
  input: "gradients/discriminator_1/while/d_class_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/add_grad/Sum"
  op: "Sum"
  input: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "gradients/discriminator_1/while/d_class_unit/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_class_unit/add_grad/Sum"
  input: "gradients/discriminator_1/while/d_class_unit/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "gradients/discriminator_1/while/d_class_unit/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_class_unit/add_grad/Sum_1"
  input: "gradients/discriminator_1/while/d_class_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/b_acc_1"
  input: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/Add"
  op: "Add"
  input: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/Switch:1"
  input: "gradients/discriminator_1/while/d_class_unit/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/RefEnter"
  input: "discriminator_1/while/d_class_unit/Reshape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/discriminator_1/while/d_class_unit/add_grad/Reshape_1"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul_1/Enter"
  input: "gradients/discriminator_1/while/d_class_unit/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/discriminator_1/while/Merge_3_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/b_acc_1"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/Switch:1"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 70
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_class_unit/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul_grad/MatMul_1"
  input: "gradients/discriminator_1/while/d_class_unit/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/discriminator_1/while/Merge_2_grad/Switch:1"
  input: "gradients/discriminator_1/while/d_class_unit/Reshape_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/discriminator_1/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/Reshape_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings/Gather_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/embeddings/Gather_grad/Size"
  op: "Size"
  input: "generations/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings/Gather_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/embeddings/Gather_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/embeddings/Gather_grad/Size"
  input: "gradients/embeddings/Gather_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings/Gather_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/embeddings/Gather_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/embeddings/Gather_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/embeddings/Gather_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/embeddings/Gather_grad/Shape"
  input: "gradients/embeddings/Gather_grad/strided_slice/stack"
  input: "gradients/embeddings/Gather_grad/strided_slice/stack_1"
  input: "gradients/embeddings/Gather_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/embeddings/Gather_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/embeddings/Gather_grad/concat"
  op: "ConcatV2"
  input: "gradients/embeddings/Gather_grad/ExpandDims"
  input: "gradients/embeddings/Gather_grad/strided_slice"
  input: "gradients/embeddings/Gather_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings/Gather_grad/Reshape"
  op: "Reshape"
  input: "gradients/embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "gradients/embeddings/Gather_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/embeddings/Gather_grad/Reshape_1"
  op: "Reshape"
  input: "generations/TensorArrayStack/TensorArrayGatherV3"
  input: "gradients/embeddings/Gather_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Shape"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Sum"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/Reshape_2_grad/Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/Reshape_2_grad/Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Sum_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Shape"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/RefEnter"
  input: "discriminator_1/while/d_recurr_unit/Reshape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul"
  op: "Mul"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/RefEnter"
  input: "discriminator_1/while/d_recurr_unit/sub"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/StackPop"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Sum_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Shape"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/RefEnter"
  input: "discriminator_1/while/d_recurr_unit/Tanh"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul"
  op: "Mul"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Reshape_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/RefEnter"
  input: "discriminator_1/while/d_recurr_unit/Sigmoid_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPop"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Sum_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Shape"
  input: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Sum"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Neg"
  op: "Neg"
  input: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Neg"
  input: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPop"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/sub_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPop"
  input: "gradients/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Shape"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Sum"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/Tanh_grad/TanhGrad"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/Tanh_grad/TanhGrad"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Sum_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Shape"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Sum_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/RefEnter"
  input: "discriminator_1/while/d_recurr_unit/Reshape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul_1/Enter"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/RefEnter"
  input: "discriminator_1/while/d_recurr_unit/mul"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Reshape_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul_1/Enter"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2_grad/MatMul_1/Enter"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Reshape_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3_grad/MatMul_1/Enter"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/b_acc_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/Switch:1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/b_acc_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/Switch:1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/Shape"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul"
  op: "Mul"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/Sum"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/RefEnter"
  input: "discriminator_1/while/d_recurr_unit/Sigmoid"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1"
  op: "Mul"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPop"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/Sum_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/b_acc_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/Switch:1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/b_acc_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/Switch:1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPop"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Shape"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Sum"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/Sigmoid_grad/SigmoidGrad"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/discriminator_1/while/d_recurr_unit/Sigmoid_grad/SigmoidGrad"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Sum_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Reshape"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_grad/MatMul_1/Enter"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Reshape_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1_grad/MatMul_1/Enter"
  input: "gradients/discriminator_1/while/d_recurr_unit/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/b_acc_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/Switch:1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2_grad/MatMul_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_3"
  input: "gradients/discriminator_1/while/d_recurr_unit/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/b_acc_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/Switch:1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Reshape_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3_grad/MatMul_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/mul_grad/Reshape_1"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/discriminator_1/while/d_recurr_unit/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/Reshape_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 70
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/d_recurr_unit/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_4"
  input: "gradients/discriminator_1/while/d_recurr_unit/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "embeddings/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity_1"
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity_1"
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPush"
  op: "StackPush"
  input: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/RefEnter"
  input: "discriminator_1/while/Identity_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity_1"
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity_1"
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop"
  op: "StackPop"
  input: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity_1"
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop"
  input: "^gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients/discriminator_1/while/d_recurr_unit/Reshape_grad/Reshape"
  input: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/discriminator_1/while/Merge_1_grad/Switch:1"
  input: "gradients/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/discriminator_1/while/Switch_1_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients/discriminator_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/discriminator_1/while/d_recurr_unit/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/discriminator_1/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients_1/Fill"
  op: "Fill"
  input: "gradients_1/Shape"
  input: "gradients_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/f_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_1/f_count_1"
  op: "Enter"
  input: "gradients_1/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/Merge"
  op: "Merge"
  input: "gradients_1/f_count_1"
  input: "gradients_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/Switch"
  op: "Switch"
  input: "gradients_1/Merge"
  input: "discriminator_1/while_1/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/Add/y"
  op: "Const"
  input: "^discriminator_1/while_1/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_1/Add"
  op: "Add"
  input: "gradients_1/Switch:1"
  input: "gradients_1/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/NextIteration"
  op: "NextIteration"
  input: "gradients_1/Add"
  input: "^gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  input: "^gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul/StackPush"
  input: "^gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/StackPush"
  input: "^gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul_1/StackPush"
  input: "^gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul/StackPush"
  input: "^gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1/StackPush"
  input: "^gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul/StackPush"
  input: "^gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul/StackPush"
  input: "^gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1/StackPush"
  input: "^gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPush"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/f_count_2"
  op: "Exit"
  input: "gradients_1/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/b_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_1/b_count_1"
  op: "Enter"
  input: "gradients_1/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/Merge_1"
  op: "Merge"
  input: "gradients_1/b_count_1"
  input: "gradients_1/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients_1/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients_1/Merge_1"
  input: "gradients_1/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/b_count_2"
  op: "LoopCond"
  input: "gradients_1/GreaterEqual"
}
node {
  name: "gradients_1/Switch_1"
  op: "Switch"
  input: "gradients_1/Merge_1"
  input: "gradients_1/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/Sub"
  op: "Sub"
  input: "gradients_1/Switch_1:1"
  input: "gradients_1/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/NextIteration_1"
  op: "NextIteration"
  input: "gradients_1/Sub"
  input: "^gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/b_count_3"
  op: "Exit"
  input: "gradients_1/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/Fill"
  input: "gradients_1/loss/Mean_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/Tile"
  op: "Tile"
  input: "gradients_1/loss/Mean_1_grad/Reshape"
  input: "gradients_1/loss/Mean_1_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/Prod"
  op: "Prod"
  input: "gradients_1/loss/Mean_1_grad/Shape"
  input: "gradients_1/loss/Mean_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/Prod_1"
  op: "Prod"
  input: "gradients_1/loss/Mean_1_grad/Shape_1"
  input: "gradients_1/loss/Mean_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/Maximum"
  op: "Maximum"
  input: "gradients_1/loss/Mean_1_grad/Prod_1"
  input: "gradients_1/loss/Mean_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients_1/loss/Mean_1_grad/Prod"
  input: "gradients_1/loss/Mean_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/Cast"
  op: "Cast"
  input: "gradients_1/loss/Mean_1_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "gradients_1/loss/Mean_1_grad/Tile"
  input: "gradients_1/loss/Mean_1_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_1/loss/logistic_loss_1_grad/Shape"
  input: "gradients_1/loss/logistic_loss_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1_grad/Sum"
  op: "Sum"
  input: "gradients_1/loss/Mean_1_grad/truediv"
  input: "gradients_1/loss/logistic_loss_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/loss/logistic_loss_1_grad/Sum"
  input: "gradients_1/loss/logistic_loss_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1_grad/Sum_1"
  op: "Sum"
  input: "gradients_1/loss/Mean_1_grad/truediv"
  input: "gradients_1/loss/logistic_loss_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_1/loss/logistic_loss_1_grad/Sum_1"
  input: "gradients_1/loss/logistic_loss_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/sub_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_1/loss/logistic_loss_1/sub_grad/Shape"
  input: "gradients_1/loss/logistic_loss_1/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/sub_grad/Sum"
  op: "Sum"
  input: "gradients_1/loss/logistic_loss_1_grad/Reshape"
  input: "gradients_1/loss/logistic_loss_1/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/loss/logistic_loss_1/sub_grad/Sum"
  input: "gradients_1/loss/logistic_loss_1/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients_1/loss/logistic_loss_1_grad/Reshape"
  input: "gradients_1/loss/logistic_loss_1/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/sub_grad/Neg"
  op: "Neg"
  input: "gradients_1/loss/logistic_loss_1/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_1/loss/logistic_loss_1/sub_grad/Neg"
  input: "gradients_1/loss/logistic_loss_1/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/Log1p_grad/add/x"
  op: "Const"
  input: "^gradients_1/loss/logistic_loss_1_grad/Reshape_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/Log1p_grad/add"
  op: "Add"
  input: "gradients_1/loss/logistic_loss_1/Log1p_grad/add/x"
  input: "loss/logistic_loss_1/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "gradients_1/loss/logistic_loss_1/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/Log1p_grad/mul"
  op: "Mul"
  input: "gradients_1/loss/logistic_loss_1_grad/Reshape_1"
  input: "gradients_1/loss/logistic_loss_1/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "discriminator_1/predictions_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/Select_grad/Select"
  op: "Select"
  input: "loss/logistic_loss_1/GreaterEqual"
  input: "gradients_1/loss/logistic_loss_1/sub_grad/Reshape"
  input: "gradients_1/loss/logistic_loss_1/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/Select_grad/Select_1"
  op: "Select"
  input: "loss/logistic_loss_1/GreaterEqual"
  input: "gradients_1/loss/logistic_loss_1/Select_grad/zeros_like"
  input: "gradients_1/loss/logistic_loss_1/sub_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/mul_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_1/loss/logistic_loss_1/mul_grad/Shape"
  input: "gradients_1/loss/logistic_loss_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/mul_grad/mul"
  op: "Mul"
  input: "gradients_1/loss/logistic_loss_1/sub_grad/Reshape_1"
  input: "loss/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/mul_grad/Sum"
  op: "Sum"
  input: "gradients_1/loss/logistic_loss_1/mul_grad/mul"
  input: "gradients_1/loss/logistic_loss_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/loss/logistic_loss_1/mul_grad/Sum"
  input: "gradients_1/loss/logistic_loss_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/mul_grad/mul_1"
  op: "Mul"
  input: "discriminator_1/predictions_1/Reshape"
  input: "gradients_1/loss/logistic_loss_1/sub_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients_1/loss/logistic_loss_1/mul_grad/mul_1"
  input: "gradients_1/loss/logistic_loss_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_1/loss/logistic_loss_1/mul_grad/Sum_1"
  input: "gradients_1/loss/logistic_loss_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/Exp_grad/mul"
  op: "Mul"
  input: "gradients_1/loss/logistic_loss_1/Log1p_grad/mul"
  input: "loss/logistic_loss_1/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "loss/logistic_loss_1/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/Select_1_grad/Select"
  op: "Select"
  input: "loss/logistic_loss_1/GreaterEqual"
  input: "gradients_1/loss/logistic_loss_1/Exp_grad/mul"
  input: "gradients_1/loss/logistic_loss_1/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/Select_1_grad/Select_1"
  op: "Select"
  input: "loss/logistic_loss_1/GreaterEqual"
  input: "gradients_1/loss/logistic_loss_1/Select_1_grad/zeros_like"
  input: "gradients_1/loss/logistic_loss_1/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/loss/logistic_loss_1/Neg_grad/Neg"
  op: "Neg"
  input: "gradients_1/loss/logistic_loss_1/Select_1_grad/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/AddN"
  op: "AddN"
  input: "gradients_1/loss/logistic_loss_1/Select_grad/Select"
  input: "gradients_1/loss/logistic_loss_1/mul_grad/Reshape"
  input: "gradients_1/loss/logistic_loss_1/Select_1_grad/Select_1"
  input: "gradients_1/loss/logistic_loss_1/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_1/loss/logistic_loss_1/Select_grad/Select"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/predictions_1/Reshape_grad/Shape"
  op: "Shape"
  input: "discriminator_1/predictions_1/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/predictions_1/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/AddN"
  input: "gradients_1/discriminator_1/predictions_1/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/predictions_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "predictions/TensorArray_1"
  input: "discriminator_1/while_1/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_1"
    }
  }
}
node {
  name: "gradients_1/discriminator_1/predictions_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "discriminator_1/while_1/Exit_3"
  input: "^gradients_1/discriminator_1/predictions_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/predictions_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients_1/discriminator_1/predictions_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "discriminator_1/predictions_1/TensorArrayStack/range"
  input: "gradients_1/discriminator_1/predictions_1/Reshape_grad/Reshape"
  input: "gradients_1/discriminator_1/predictions_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
}
node {
  name: "gradients_1/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_1/zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients_1/discriminator_1/predictions_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients_1/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients_1/discriminator_1/while_1/Exit_3_grad/b_exit"
  input: "gradients_1/discriminator_1/while_1/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients_1/discriminator_1/while_1/Exit_1_grad/b_exit"
  input: "gradients_1/discriminator_1/while_1/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients_1/discriminator_1/while_1/Exit_2_grad/b_exit"
  input: "gradients_1/discriminator_1/while_1/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients_1/discriminator_1/while_1/Switch_3_grad/b_switch"
  input: "gradients_1/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_1/discriminator_1/while_1/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients_1/discriminator_1/while_1/Switch_1_grad/b_switch"
  input: "gradients_1/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_1/discriminator_1/while_1/Switch_1_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients_1/discriminator_1/while_1/Switch_2_grad/b_switch"
  input: "gradients_1/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_1/discriminator_1/while_1/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients_1/discriminator_1/while_1/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients_1/discriminator_1/while_1/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "predictions/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients_1/discriminator_1/while_1/Merge_3_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_1"
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients_1/discriminator_1/while_1/Merge_3_grad/Switch:1"
  input: "^gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/Identity"
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/Identity"
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  op: "StackPush"
  input: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  input: "discriminator_1/while_1/Identity"
  input: "^gradients_1/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/Identity"
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/Identity"
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  op: "StackPop"
  input: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  input: "^gradients_1/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/Identity"
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "^gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul/StackPop"
  input: "^gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/StackPop"
  input: "^gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul_1/StackPop"
  input: "^gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul/StackPop"
  input: "^gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1/StackPop"
  input: "^gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  input: "^gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul/StackPop"
  input: "^gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1/StackPop"
  input: "^gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/embeddings/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "embeddings/TensorArray_1"
  input: "gradients_1/discriminator_1/while_1/Enter_1_grad/Exit"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_1"
    }
  }
}
node {
  name: "gradients_1/embeddings/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients_1/discriminator_1/while_1/Enter_1_grad/Exit"
  input: "^gradients_1/embeddings/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
}
node {
  name: "gradients_1/embeddings/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients_1/embeddings/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "embeddings/TensorArrayUnstack_1/range"
  input: "gradients_1/embeddings/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Shape"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Shape_1"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Shape"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Sum"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Sum"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Sum_1"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Sum_1"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/embeddings/Gather_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/embeddings/Gather_1_grad/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_1/embeddings/Gather_1_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_1/embeddings/Gather_1_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients_1/embeddings/Gather_1_grad/Size"
  input: "gradients_1/embeddings/Gather_1_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/embeddings/Gather_1_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_1/embeddings/Gather_1_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_1/embeddings/Gather_1_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_1/embeddings/Gather_1_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients_1/embeddings/Gather_1_grad/Shape"
  input: "gradients_1/embeddings/Gather_1_grad/strided_slice/stack"
  input: "gradients_1/embeddings/Gather_1_grad/strided_slice/stack_1"
  input: "gradients_1/embeddings/Gather_1_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients_1/embeddings/Gather_1_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_1/embeddings/Gather_1_grad/concat"
  op: "ConcatV2"
  input: "gradients_1/embeddings/Gather_1_grad/ExpandDims"
  input: "gradients_1/embeddings/Gather_1_grad/strided_slice"
  input: "gradients_1/embeddings/Gather_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/embeddings/Gather_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/embeddings/TensorArrayUnstack_1/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "gradients_1/embeddings/Gather_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/embeddings/Gather_1_grad/Reshape_1"
  op: "Reshape"
  input: "input/Placeholder"
  input: "gradients_1/embeddings/Gather_1_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/b_acc_1"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/b_acc_2"
  input: "gradients_1/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/Add"
  op: "Add"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/Switch:1"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul/RefEnter"
  input: "discriminator_1/while_1/d_class_unit/Reshape"
  input: "^gradients_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul/StackPop/RefEnter"
  input: "^gradients_1/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Reshape_1"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul_1/Enter"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients_1/discriminator_1/while_1/Merge_3_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/b_acc_1"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/b_acc_2"
  input: "gradients_1/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/Switch:1"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 70
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_class_unit/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul_grad/MatMul_1"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/AddN_1"
  op: "AddN"
  input: "gradients_1/discriminator_1/while_1/Merge_2_grad/Switch:1"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/Reshape_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_1/discriminator_1/while_1/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/Reshape_2_grad/Shape"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/AddN_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Shape"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Shape_1"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Shape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Sum"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/Reshape_2_grad/Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Sum_1"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/Reshape_2_grad/Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Sum_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Shape"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Shape_1"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Shape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/RefEnter"
  input: "discriminator_1/while_1/d_recurr_unit/Reshape_1"
  input: "^gradients_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/StackPop/RefEnter"
  input: "^gradients_1/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul"
  op: "Mul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul_1/RefEnter"
  input: "discriminator_1/while_1/d_recurr_unit/sub"
  input: "^gradients_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul_1/StackPop/RefEnter"
  input: "^gradients_1/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul_1/StackPop"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Sum_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Shape"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Shape_1"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Shape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul/RefEnter"
  input: "discriminator_1/while_1/d_recurr_unit/Tanh"
  input: "^gradients_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul/StackPop/RefEnter"
  input: "^gradients_1/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul"
  op: "Mul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Reshape_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1/RefEnter"
  input: "discriminator_1/while_1/d_recurr_unit/Sigmoid_1"
  input: "^gradients_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1/StackPop/RefEnter"
  input: "^gradients_1/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1/StackPop"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Sum_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Shape"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Shape_1"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Shape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Sum"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Neg"
  op: "Neg"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Neg"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul/StackPop"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/AddN_2"
  op: "AddN"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/sub_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_2_grad/mul_1/StackPop"
  input: "gradients_1/AddN_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Shape"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Shape_1"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Shape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Sum"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/Tanh_grad/TanhGrad"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/Tanh_grad/TanhGrad"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Sum_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Shape"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Shape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Sum"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Sum_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul/RefEnter"
  input: "discriminator_1/while_1/d_recurr_unit/Reshape"
  input: "^gradients_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul/StackPop/RefEnter"
  input: "^gradients_1/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul_1/Enter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul/RefEnter"
  input: "discriminator_1/while_1/d_recurr_unit/mul"
  input: "^gradients_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul/StackPop/RefEnter"
  input: "^gradients_1/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Reshape_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul_1/Enter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2_grad/MatMul_1/Enter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Reshape_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3_grad/MatMul_1/Enter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/b_acc_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/b_acc_2"
  input: "gradients_1/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/Add"
  op: "Add"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/Switch:1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/b_acc_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/b_acc_2"
  input: "gradients_1/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/Add"
  op: "Add"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/Switch:1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/Shape"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/Shape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul"
  op: "Mul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/Sum"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1/RefEnter"
  input: "discriminator_1/while_1/d_recurr_unit/Sigmoid"
  input: "^gradients_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1/StackPop/RefEnter"
  input: "^gradients_1/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1"
  op: "Mul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1/StackPop"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/Sum_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/b_acc_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/b_acc_2"
  input: "gradients_1/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/Switch:1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/b_acc_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/b_acc_2"
  input: "gradients_1/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/Switch:1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/mul_1/StackPop"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Shape"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Shape_1"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Shape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Sum"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/Sigmoid_grad/SigmoidGrad"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Sum_1"
  op: "Sum"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/Sigmoid_grad/SigmoidGrad"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Sum_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Reshape"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_grad/MatMul_1/Enter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Reshape_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1_grad/MatMul_1/Enter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/b_acc_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/b_acc_2"
  input: "gradients_1/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/Switch:1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/AddN_3"
  op: "AddN"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2_grad/MatMul_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/AddN_3"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/b_acc_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/b_acc_2"
  input: "gradients_1/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/Switch:1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/AddN_4"
  op: "AddN"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Reshape_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3_grad/MatMul_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/mul_grad/Reshape_1"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_1/discriminator_1/while_1/d_recurr_unit/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/Reshape_1_grad/Shape"
  op: "Const"
  input: "^gradients_1/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 70
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/d_recurr_unit/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_1/AddN_4"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "embeddings/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/Identity_1"
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/Identity_1"
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPush"
  op: "StackPush"
  input: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/RefEnter"
  input: "discriminator_1/while_1/Identity_1"
  input: "^gradients_1/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/Identity_1"
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/Identity_1"
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_1/discriminator_1/while_1/discriminator_1/while_1/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop"
  op: "StackPop"
  input: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop/RefEnter"
  input: "^gradients_1/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while_1/Identity_1"
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_1"
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop"
  input: "^gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients_1/discriminator_1/while_1/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/Reshape_grad/Reshape"
  input: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray_1"
      }
    }
  }
}
node {
  name: "gradients_1/AddN_5"
  op: "AddN"
  input: "gradients_1/discriminator_1/while_1/Merge_1_grad/Switch:1"
  input: "gradients_1/discriminator_1/while_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_1/discriminator_1/while_1/Switch_1_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_1/discriminator_1/while_1/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients_1/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "GradientDescent/update_discriminator/discriminator/Variable/mul"
  op: "Mul"
  input: "gradients/embeddings/Gather_grad/Reshape"
  input: "hyperparams/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable"
      }
    }
  }
}
node {
  name: "GradientDescent/update_discriminator/discriminator/Variable/ScatterSub"
  op: "ScatterSub"
  input: "discriminator/discriminator/Variable"
  input: "gradients/embeddings/Gather_grad/Reshape_1"
  input: "GradientDescent/update_discriminator/discriminator/Variable/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_discriminator/discriminator/weights/Variable/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/weights/Variable"
  input: "hyperparams/Variable/read"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_discriminator/discriminator/weights/Variable_1/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/weights/Variable_1"
  input: "hyperparams/Variable/read"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_discriminator/discriminator/weights/Variable_2/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/weights/Variable_2"
  input: "hyperparams/Variable/read"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_discriminator/discriminator/weights/Variable_3/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/weights/Variable_3"
  input: "hyperparams/Variable/read"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_discriminator/discriminator/weights/Variable_4/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/weights/Variable_4"
  input: "hyperparams/Variable/read"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_discriminator/discriminator/weights/Variable_5/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/weights/Variable_5"
  input: "hyperparams/Variable/read"
  input: "gradients/discriminator_1/while/d_recurr_unit/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_discriminator/discriminator/Variable_1/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/Variable_1"
  input: "hyperparams/Variable/read"
  input: "gradients/discriminator_1/while/d_class_unit/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_discriminator/discriminator/Variable_2/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/Variable_2"
  input: "hyperparams/Variable/read"
  input: "gradients/discriminator_1/while/d_class_unit/add/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent/update_discriminator/discriminator/Variable_3/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/Variable_3"
  input: "hyperparams/Variable/read"
  input: "gradients/discriminator_1/while/Enter_2_grad/Exit"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent"
  op: "NoOp"
  input: "^GradientDescent/update_discriminator/discriminator/Variable/ScatterSub"
  input: "^GradientDescent/update_discriminator/discriminator/weights/Variable/ApplyGradientDescent"
  input: "^GradientDescent/update_discriminator/discriminator/weights/Variable_1/ApplyGradientDescent"
  input: "^GradientDescent/update_discriminator/discriminator/weights/Variable_2/ApplyGradientDescent"
  input: "^GradientDescent/update_discriminator/discriminator/weights/Variable_3/ApplyGradientDescent"
  input: "^GradientDescent/update_discriminator/discriminator/weights/Variable_4/ApplyGradientDescent"
  input: "^GradientDescent/update_discriminator/discriminator/weights/Variable_5/ApplyGradientDescent"
  input: "^GradientDescent/update_discriminator/discriminator/Variable_1/ApplyGradientDescent"
  input: "^GradientDescent/update_discriminator/discriminator/Variable_2/ApplyGradientDescent"
  input: "^GradientDescent/update_discriminator/discriminator/Variable_3/ApplyGradientDescent"
}
node {
  name: "GradientDescent_1/update_discriminator/discriminator/Variable/mul"
  op: "Mul"
  input: "gradients_1/embeddings/Gather_1_grad/Reshape"
  input: "hyperparams/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable"
      }
    }
  }
}
node {
  name: "GradientDescent_1/update_discriminator/discriminator/Variable/ScatterSub"
  op: "ScatterSub"
  input: "discriminator/discriminator/Variable"
  input: "gradients_1/embeddings/Gather_1_grad/Reshape_1"
  input: "GradientDescent_1/update_discriminator/discriminator/Variable/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_1/update_discriminator/discriminator/weights/Variable/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/weights/Variable"
  input: "hyperparams/Variable/read"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_1/update_discriminator/discriminator/weights/Variable_1/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/weights/Variable_1"
  input: "hyperparams/Variable/read"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_1/update_discriminator/discriminator/weights/Variable_2/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/weights/Variable_2"
  input: "hyperparams/Variable/read"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_4/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_1/update_discriminator/discriminator/weights/Variable_3/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/weights/Variable_3"
  input: "hyperparams/Variable/read"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_1/update_discriminator/discriminator/weights/Variable_4/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/weights/Variable_4"
  input: "hyperparams/Variable/read"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_1/update_discriminator/discriminator/weights/Variable_5/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/weights/Variable_5"
  input: "hyperparams/Variable/read"
  input: "gradients_1/discriminator_1/while_1/d_recurr_unit/MatMul_5/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/weights/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_1/update_discriminator/discriminator/Variable_1/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/Variable_1"
  input: "hyperparams/Variable/read"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_1/update_discriminator/discriminator/Variable_2/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/Variable_2"
  input: "hyperparams/Variable/read"
  input: "gradients_1/discriminator_1/while_1/d_class_unit/add/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_1/update_discriminator/discriminator/Variable_3/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "discriminator/discriminator/Variable_3"
  input: "hyperparams/Variable/read"
  input: "gradients_1/discriminator_1/while_1/Enter_2_grad/Exit"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_1"
  op: "NoOp"
  input: "^GradientDescent_1/update_discriminator/discriminator/Variable/ScatterSub"
  input: "^GradientDescent_1/update_discriminator/discriminator/weights/Variable/ApplyGradientDescent"
  input: "^GradientDescent_1/update_discriminator/discriminator/weights/Variable_1/ApplyGradientDescent"
  input: "^GradientDescent_1/update_discriminator/discriminator/weights/Variable_2/ApplyGradientDescent"
  input: "^GradientDescent_1/update_discriminator/discriminator/weights/Variable_3/ApplyGradientDescent"
  input: "^GradientDescent_1/update_discriminator/discriminator/weights/Variable_4/ApplyGradientDescent"
  input: "^GradientDescent_1/update_discriminator/discriminator/weights/Variable_5/ApplyGradientDescent"
  input: "^GradientDescent_1/update_discriminator/discriminator/Variable_1/ApplyGradientDescent"
  input: "^GradientDescent_1/update_discriminator/discriminator/Variable_2/ApplyGradientDescent"
  input: "^GradientDescent_1/update_discriminator/discriminator/Variable_3/ApplyGradientDescent"
}
node {
  name: "gradients_2/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_2/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients_2/Fill"
  op: "Fill"
  input: "gradients_2/Shape"
  input: "gradients_2/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients_2/Fill"
  input: "gradients_2/loss_1/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/Tile"
  op: "Tile"
  input: "gradients_2/loss_1/Mean_grad/Reshape"
  input: "gradients_2/loss_1/Mean_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/Prod"
  op: "Prod"
  input: "gradients_2/loss_1/Mean_grad/Shape"
  input: "gradients_2/loss_1/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients_2/loss_1/Mean_grad/Shape_1"
  input: "gradients_2/loss_1/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients_2/loss_1/Mean_grad/Prod_1"
  input: "gradients_2/loss_1/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients_2/loss_1/Mean_grad/Prod"
  input: "gradients_2/loss_1/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/Cast"
  op: "Cast"
  input: "gradients_2/loss_1/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_2/loss_1/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients_2/loss_1/Mean_grad/Tile"
  input: "gradients_2/loss_1/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_2/loss_1/pow_grad/Shape"
  input: "gradients_2/loss_1/pow_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/mul"
  op: "Mul"
  input: "gradients_2/loss_1/Mean_grad/truediv"
  input: "loss_1/pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/sub"
  op: "Sub"
  input: "loss_1/pow/y"
  input: "gradients_2/loss_1/pow_grad/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/Pow"
  op: "Pow"
  input: "rewards_1/sub"
  input: "gradients_2/loss_1/pow_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/mul_1"
  op: "Mul"
  input: "gradients_2/loss_1/pow_grad/mul"
  input: "gradients_2/loss_1/pow_grad/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/Sum"
  op: "Sum"
  input: "gradients_2/loss_1/pow_grad/mul_1"
  input: "gradients_2/loss_1/pow_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/Reshape"
  op: "Reshape"
  input: "gradients_2/loss_1/pow_grad/Sum"
  input: "gradients_2/loss_1/pow_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/Greater/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/Greater"
  op: "Greater"
  input: "rewards_1/sub"
  input: "gradients_2/loss_1/pow_grad/Greater/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/Log"
  op: "Log"
  input: "rewards_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/zeros_like"
  op: "ZerosLike"
  input: "rewards_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/Select"
  op: "Select"
  input: "gradients_2/loss_1/pow_grad/Greater"
  input: "gradients_2/loss_1/pow_grad/Log"
  input: "gradients_2/loss_1/pow_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/mul_2"
  op: "Mul"
  input: "gradients_2/loss_1/Mean_grad/truediv"
  input: "loss_1/pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/mul_3"
  op: "Mul"
  input: "gradients_2/loss_1/pow_grad/mul_2"
  input: "gradients_2/loss_1/pow_grad/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/Sum_1"
  op: "Sum"
  input: "gradients_2/loss_1/pow_grad/mul_3"
  input: "gradients_2/loss_1/pow_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_2/loss_1/pow_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_2/loss_1/pow_grad/Sum_1"
  input: "gradients_2/loss_1/pow_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_2/rewards_1/sub_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_2/rewards_1/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_2/rewards_1/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_2/rewards_1/sub_grad/Shape"
  input: "gradients_2/rewards_1/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_2/rewards_1/sub_grad/Sum"
  op: "Sum"
  input: "gradients_2/loss_1/pow_grad/Reshape"
  input: "gradients_2/rewards_1/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_2/rewards_1/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients_2/rewards_1/sub_grad/Sum"
  input: "gradients_2/rewards_1/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_2/rewards_1/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients_2/loss_1/pow_grad/Reshape"
  input: "gradients_2/rewards_1/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_2/rewards_1/sub_grad/Neg"
  op: "Neg"
  input: "gradients_2/rewards_1/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_2/rewards_1/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_2/rewards_1/sub_grad/Neg"
  input: "gradients_2/rewards_1/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "GradientDescent_2/update_rewards/Variable/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "rewards/Variable"
  input: "hyperparams/Variable/read"
  input: "gradients_2/rewards_1/sub_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rewards/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_2"
  op: "NoOp"
  input: "^GradientDescent_2/update_rewards/Variable/ApplyGradientDescent"
}
node {
  name: "gradients_3/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_3/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients_3/Fill"
  op: "Fill"
  input: "gradients_3/Shape"
  input: "gradients_3/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/f_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/f_count_1"
  op: "Enter"
  input: "gradients_3/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/Merge"
  op: "Merge"
  input: "gradients_3/f_count_1"
  input: "gradients_3/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/Switch"
  op: "Switch"
  input: "gradients_3/Merge"
  input: "generator_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/Add/y"
  op: "Const"
  input: "^generator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/Add"
  op: "Add"
  input: "gradients_3/Switch:1"
  input: "gradients_3/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/NextIteration"
  op: "NextIteration"
  input: "gradients_3/Add"
  input: "^gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  input: "^gradients_3/generator_1/while/Gather_grad/Reshape_1/StackPush"
  input: "^gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul/StackPush"
  input: "^gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul/StackPush"
  input: "^gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul/StackPush"
  input: "^gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/StackPush"
  input: "^gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul_1/StackPush"
  input: "^gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul/StackPush"
  input: "^gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1/StackPush"
  input: "^gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul/StackPush"
  input: "^gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul/StackPush"
  input: "^gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1/StackPush"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/f_count_2"
  op: "Exit"
  input: "gradients_3/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/b_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/b_count_1"
  op: "Enter"
  input: "gradients_3/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/Merge_1"
  op: "Merge"
  input: "gradients_3/b_count_1"
  input: "gradients_3/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients_3/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients_3/Merge_1"
  input: "gradients_3/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/b_count_2"
  op: "LoopCond"
  input: "gradients_3/GreaterEqual"
}
node {
  name: "gradients_3/Switch_1"
  op: "Switch"
  input: "gradients_3/Merge_1"
  input: "gradients_3/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/Sub"
  op: "Sub"
  input: "gradients_3/Switch_1:1"
  input: "gradients_3/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/NextIteration_1"
  op: "NextIteration"
  input: "gradients_3/Sub"
  input: "^gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/b_count_3"
  op: "Exit"
  input: "gradients_3/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/f_count_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/f_count_4"
  op: "Enter"
  input: "gradients_3/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/Merge_2"
  op: "Merge"
  input: "gradients_3/f_count_4"
  input: "gradients_3/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/Switch_2"
  op: "Switch"
  input: "gradients_3/Merge_2"
  input: "discriminator_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/Add_1/y"
  op: "Const"
  input: "^discriminator_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/Add_1"
  op: "Add"
  input: "gradients_3/Switch_2:1"
  input: "gradients_3/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/NextIteration_2"
  op: "NextIteration"
  input: "gradients_3/Add_1"
  input: "^gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  input: "^gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/StackPush"
  input: "^gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPush"
  input: "^gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/StackPush"
  input: "^gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPush"
  input: "^gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPush"
  input: "^gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPush"
  input: "^gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/StackPush"
  input: "^gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPush"
  input: "^gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPush"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/f_count_5"
  op: "Exit"
  input: "gradients_3/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/b_count_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/b_count_5"
  op: "Enter"
  input: "gradients_3/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/Merge_3"
  op: "Merge"
  input: "gradients_3/b_count_5"
  input: "gradients_3/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/GreaterEqual_1/Enter"
  op: "Enter"
  input: "gradients_3/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/GreaterEqual_1"
  op: "GreaterEqual"
  input: "gradients_3/Merge_3"
  input: "gradients_3/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/b_count_6"
  op: "LoopCond"
  input: "gradients_3/GreaterEqual_1"
}
node {
  name: "gradients_3/Switch_3"
  op: "Switch"
  input: "gradients_3/Merge_3"
  input: "gradients_3/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/Sub_1"
  op: "Sub"
  input: "gradients_3/Switch_3:1"
  input: "gradients_3/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/NextIteration_3"
  op: "NextIteration"
  input: "gradients_3/Sub_1"
  input: "^gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/b_count_7"
  op: "Exit"
  input: "gradients_3/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/Neg_grad/Neg"
  op: "Neg"
  input: "gradients_3/Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/loss_1/Neg_grad/Neg"
  input: "gradients_3/loss_1/Mean_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/Tile"
  op: "Tile"
  input: "gradients_3/loss_1/Mean_1_grad/Reshape"
  input: "gradients_3/loss_1/Mean_1_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/Prod"
  op: "Prod"
  input: "gradients_3/loss_1/Mean_1_grad/Shape"
  input: "gradients_3/loss_1/Mean_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/Prod_1"
  op: "Prod"
  input: "gradients_3/loss_1/Mean_1_grad/Shape_1"
  input: "gradients_3/loss_1/Mean_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/Maximum"
  op: "Maximum"
  input: "gradients_3/loss_1/Mean_1_grad/Prod_1"
  input: "gradients_3/loss_1/Mean_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients_3/loss_1/Mean_1_grad/Prod"
  input: "gradients_3/loss_1/Mean_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/Cast"
  op: "Cast"
  input: "gradients_3/loss_1/Mean_1_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "gradients_3/loss_1/Mean_1_grad/Tile"
  input: "gradients_3/loss_1/Mean_1_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/loss_1/mul_grad/Shape"
  op: "Shape"
  input: "loss_1/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_3/loss_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/loss_1/mul_grad/Shape"
  input: "gradients_3/loss_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/mul_grad/mul"
  op: "Mul"
  input: "gradients_3/loss_1/Mean_1_grad/truediv"
  input: "rewards_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/loss_1/mul_grad/Sum"
  op: "Sum"
  input: "gradients_3/loss_1/mul_grad/mul"
  input: "gradients_3/loss_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/loss_1/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/loss_1/mul_grad/Sum"
  input: "gradients_3/loss_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/mul_grad/mul_1"
  op: "Mul"
  input: "loss_1/Log"
  input: "gradients_3/loss_1/Mean_1_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/loss_1/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/loss_1/mul_grad/mul_1"
  input: "gradients_3/loss_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/loss_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/loss_1/mul_grad/Sum_1"
  input: "gradients_3/loss_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss_1/clip_by_value"
  input: "^gradients_3/loss_1/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/loss_1/Log_grad/mul"
  op: "Mul"
  input: "gradients_3/loss_1/mul_grad/Reshape"
  input: "gradients_3/loss_1/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/rewards_1/sub_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_3/rewards_1/sub_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_3/rewards_1/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/rewards_1/sub_grad/Shape"
  input: "gradients_3/rewards_1/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/rewards_1/sub_grad/Sum"
  op: "Sum"
  input: "gradients_3/loss_1/mul_grad/Reshape_1"
  input: "gradients_3/rewards_1/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/rewards_1/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/rewards_1/sub_grad/Sum"
  input: "gradients_3/rewards_1/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/rewards_1/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/loss_1/mul_grad/Reshape_1"
  input: "gradients_3/rewards_1/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/rewards_1/sub_grad/Neg"
  op: "Neg"
  input: "gradients_3/rewards_1/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/rewards_1/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/rewards_1/sub_grad/Neg"
  input: "gradients_3/rewards_1/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value_grad/Shape"
  op: "Shape"
  input: "loss_1/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "gradients_3/loss_1/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value_grad/zeros"
  op: "Fill"
  input: "gradients_3/loss_1/clip_by_value_grad/Shape_2"
  input: "gradients_3/loss_1/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss_1/clip_by_value/Minimum"
  input: "loss_1/clip_by_value/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/loss_1/clip_by_value_grad/Shape"
  input: "gradients_3/loss_1/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value_grad/Select"
  op: "Select"
  input: "gradients_3/loss_1/clip_by_value_grad/GreaterEqual"
  input: "gradients_3/loss_1/Log_grad/mul"
  input: "gradients_3/loss_1/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value_grad/LogicalNot"
  op: "LogicalNot"
  input: "gradients_3/loss_1/clip_by_value_grad/GreaterEqual"
}
node {
  name: "gradients_3/loss_1/clip_by_value_grad/Select_1"
  op: "Select"
  input: "gradients_3/loss_1/clip_by_value_grad/LogicalNot"
  input: "gradients_3/loss_1/Log_grad/mul"
  input: "gradients_3/loss_1/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value_grad/Sum"
  op: "Sum"
  input: "gradients_3/loss_1/clip_by_value_grad/Select"
  input: "gradients_3/loss_1/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/loss_1/clip_by_value_grad/Sum"
  input: "gradients_3/loss_1/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/loss_1/clip_by_value_grad/Select_1"
  input: "gradients_3/loss_1/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/loss_1/clip_by_value_grad/Sum_1"
  input: "gradients_3/loss_1/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/rewards_1/truediv_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_3/rewards_1/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_3/rewards_1/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/rewards_1/truediv_grad/Shape"
  input: "gradients_3/rewards_1/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/rewards_1/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients_3/rewards_1/sub_grad/Reshape"
  input: "rewards_1/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/rewards_1/truediv_grad/Sum"
  op: "Sum"
  input: "gradients_3/rewards_1/truediv_grad/RealDiv"
  input: "gradients_3/rewards_1/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/rewards_1/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/rewards_1/truediv_grad/Sum"
  input: "gradients_3/rewards_1/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/rewards_1/truediv_grad/Neg"
  op: "Neg"
  input: "rewards_1/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/rewards_1/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients_3/rewards_1/truediv_grad/Neg"
  input: "rewards_1/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/rewards_1/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients_3/rewards_1/truediv_grad/RealDiv_1"
  input: "rewards_1/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/rewards_1/truediv_grad/mul"
  op: "Mul"
  input: "gradients_3/rewards_1/sub_grad/Reshape"
  input: "gradients_3/rewards_1/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/rewards_1/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/rewards_1/truediv_grad/mul"
  input: "gradients_3/rewards_1/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/rewards_1/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/rewards_1/truediv_grad/Sum_1"
  input: "gradients_3/rewards_1/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "loss_1/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "gradients_3/loss_1/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/Shape_2"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "loss_1/TensorArrayStack/TensorArrayGatherV3"
  input: "loss_1/clip_by_value/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/Shape"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/LessEqual"
  input: "gradients_3/loss_1/clip_by_value_grad/Reshape"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value/Minimum_grad/LogicalNot"
  op: "LogicalNot"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/LessEqual"
}
node {
  name: "gradients_3/loss_1/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/LogicalNot"
  input: "gradients_3/loss_1/clip_by_value_grad/Reshape"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/Select"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/Sum"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/Select_1"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/loss_1/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/Sum_1"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/rewards_1/Reshape_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/rewards_1/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/rewards_1/truediv_grad/Reshape"
  input: "gradients_3/rewards_1/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/loss_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gens/TensorArray"
  input: "generator_1/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_3"
    }
  }
}
node {
  name: "gradients_3/loss_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "generator_1/while/Exit_3"
  input: "^gradients_3/loss_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_3/loss_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients_3/loss_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "loss_1/TensorArrayStack/range"
  input: "gradients_3/loss_1/clip_by_value/Minimum_grad/Reshape"
  input: "gradients_3/loss_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_3/rewards_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/rewards_1/Reshape_1_grad/Reshape"
  input: "rewards_1/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/rewards_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "rewards_1/Const"
  input: "gradients_3/rewards_1/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/rewards_1/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_3/rewards_1/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/rewards_1/MatMul_grad/MatMul_1"
  input: "gradients_3/rewards_1/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/rewards_1/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_3/rewards_1/mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_3/rewards_1/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/rewards_1/mul_1_grad/Shape"
  input: "gradients_3/rewards_1/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/rewards_1/mul_1_grad/mul"
  op: "Mul"
  input: "gradients_3/rewards_1/Reshape_grad/Reshape"
  input: "rewards_1/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/rewards_1/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients_3/rewards_1/mul_1_grad/mul"
  input: "gradients_3/rewards_1/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/rewards_1/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/rewards_1/mul_1_grad/Sum"
  input: "gradients_3/rewards_1/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/rewards_1/mul_1_grad/mul_1"
  op: "Mul"
  input: "rewards_1/Exp"
  input: "gradients_3/rewards_1/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/rewards_1/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/rewards_1/mul_1_grad/mul_1"
  input: "gradients_3/rewards_1/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/rewards_1/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/rewards_1/mul_1_grad/Sum_1"
  input: "gradients_3/rewards_1/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/rewards_1/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "rewards_1/Sigmoid"
  input: "gradients_3/rewards_1/mul_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/predictions/Reshape_grad/Shape"
  op: "Shape"
  input: "discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/predictions/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/rewards_1/Sigmoid_grad/SigmoidGrad"
  input: "gradients_3/discriminator_1/predictions/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "predictions/TensorArray"
  input: "discriminator_1/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_3"
    }
  }
}
node {
  name: "gradients_3/discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "discriminator_1/while/Exit_3"
  input: "^gradients_3/discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients_3/discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "discriminator_1/predictions/TensorArrayStack/range"
  input: "gradients_3/discriminator_1/predictions/Reshape_grad/Reshape"
  input: "gradients_3/discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_3/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_3/zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients_3/discriminator_1/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients_3/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients_3/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients_3/discriminator_1/while/Exit_3_grad/b_exit"
  input: "gradients_3/discriminator_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients_3/discriminator_1/while/Exit_1_grad/b_exit"
  input: "gradients_3/discriminator_1/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients_3/discriminator_1/while/Exit_2_grad/b_exit"
  input: "gradients_3/discriminator_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients_3/discriminator_1/while/Switch_3_grad/b_switch"
  input: "gradients_3/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/discriminator_1/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients_3/discriminator_1/while/Switch_1_grad/b_switch"
  input: "gradients_3/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/discriminator_1/while/Switch_1_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients_3/discriminator_1/while/Switch_2_grad/b_switch"
  input: "gradients_3/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/discriminator_1/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients_3/discriminator_1/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "predictions/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients_3/discriminator_1/while/Merge_3_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_3"
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients_3/discriminator_1/while/Merge_3_grad/Switch:1"
  input: "^gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity"
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity"
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  op: "StackPush"
  input: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  input: "discriminator_1/while/Identity"
  input: "^gradients_3/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity"
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity"
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  op: "StackPop"
  input: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  input: "^gradients_3/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity"
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "^gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/StackPop"
  input: "^gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop"
  input: "^gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/StackPop"
  input: "^gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPop"
  input: "^gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPop"
  input: "^gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  input: "^gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/StackPop"
  input: "^gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPop"
  input: "^gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@predictions/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "embeddings/TensorArray"
  input: "gradients_3/discriminator_1/while/Enter_1_grad/Exit"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_3"
    }
  }
}
node {
  name: "gradients_3/embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients_3/discriminator_1/while/Enter_1_grad/Exit"
  input: "^gradients_3/embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_3/embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients_3/embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "embeddings/TensorArrayUnstack/range"
  input: "gradients_3/embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/add_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/add_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/discriminator_1/while/d_class_unit/add_grad/Shape"
  input: "gradients_3/discriminator_1/while/d_class_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/add_grad/Sum"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "gradients_3/discriminator_1/while/d_class_unit/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/add_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_class_unit/add_grad/Sum"
  input: "gradients_3/discriminator_1/while/d_class_unit/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/add_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "gradients_3/discriminator_1/while/d_class_unit/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_class_unit/add_grad/Sum_1"
  input: "gradients_3/discriminator_1/while/d_class_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/RefEnter"
  input: "discriminator_1/while/d_class_unit/Reshape"
  input: "^gradients_3/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/StackPop/RefEnter"
  input: "^gradients_3/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_class_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/discriminator_1/while/d_class_unit/add_grad/Reshape_1"
  input: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul_1/Enter"
  input: "gradients_3/discriminator_1/while/d_class_unit/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients_3/discriminator_1/while/Merge_3_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 70
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_class_unit/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_class_unit/MatMul_grad/MatMul_1"
  input: "gradients_3/discriminator_1/while/d_class_unit/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/AddN"
  op: "AddN"
  input: "gradients_3/discriminator_1/while/Merge_2_grad/Switch:1"
  input: "gradients_3/discriminator_1/while/d_class_unit/Reshape_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/discriminator_1/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/Reshape_2_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/AddN"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/embeddings/Gather_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/discriminator/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/embeddings/Gather_grad/Size"
  op: "Size"
  input: "generations/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/embeddings/Gather_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/embeddings/Gather_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients_3/embeddings/Gather_grad/Size"
  input: "gradients_3/embeddings/Gather_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/embeddings/Gather_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/embeddings/Gather_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/embeddings/Gather_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/embeddings/Gather_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients_3/embeddings/Gather_grad/Shape"
  input: "gradients_3/embeddings/Gather_grad/strided_slice/stack"
  input: "gradients_3/embeddings/Gather_grad/strided_slice/stack_1"
  input: "gradients_3/embeddings/Gather_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients_3/embeddings/Gather_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/embeddings/Gather_grad/concat"
  op: "ConcatV2"
  input: "gradients_3/embeddings/Gather_grad/ExpandDims"
  input: "gradients_3/embeddings/Gather_grad/strided_slice"
  input: "gradients_3/embeddings/Gather_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/embeddings/Gather_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/embeddings/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "gradients_3/embeddings/Gather_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/embeddings/Gather_grad/Reshape_1"
  op: "Reshape"
  input: "generations/TensorArrayStack/TensorArrayGatherV3"
  input: "gradients_3/embeddings/Gather_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Shape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Sum"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/Reshape_2_grad/Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/Reshape_2_grad/Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Sum_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Shape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/RefEnter"
  input: "discriminator_1/while/d_recurr_unit/Reshape_1"
  input: "^gradients_3/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop/RefEnter"
  input: "^gradients_3/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul"
  op: "Mul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/RefEnter"
  input: "discriminator_1/while/d_recurr_unit/sub"
  input: "^gradients_3/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/StackPop/RefEnter"
  input: "^gradients_3/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1/StackPop"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Sum_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Shape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/RefEnter"
  input: "discriminator_1/while/d_recurr_unit/Tanh"
  input: "^gradients_3/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPop/RefEnter"
  input: "^gradients_3/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul"
  op: "Mul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Reshape_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/RefEnter"
  input: "discriminator_1/while/d_recurr_unit/Sigmoid_1"
  input: "^gradients_3/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPop/RefEnter"
  input: "^gradients_3/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPop"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Sum_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Shape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Sum"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Neg"
  op: "Neg"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Neg"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul/StackPop"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/zeros_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_3/zeros_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_3/zeros_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_3/AddN_1"
  op: "AddN"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/sub_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_2_grad/mul_1/StackPop"
  input: "gradients_3/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Shape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Sum"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/Tanh_grad/TanhGrad"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/Tanh_grad/TanhGrad"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Sum_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients_3/loss_1/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients_3/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients_3/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Exit_4_grad/b_exit"
  op: "Enter"
  input: "gradients_3/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Shape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Sum"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Sum_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/RefEnter"
  input: "discriminator_1/while/d_recurr_unit/Reshape"
  input: "^gradients_3/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPop/RefEnter"
  input: "^gradients_3/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul_1/Enter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/RefEnter"
  input: "discriminator_1/while/d_recurr_unit/mul"
  input: "^gradients_3/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/StackPop/RefEnter"
  input: "^gradients_3/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Reshape_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul_1/Enter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients_3/generator_1/while/Exit_3_grad/b_exit"
  input: "gradients_3/generator_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients_3/generator_1/while/Exit_1_grad/b_exit"
  input: "gradients_3/generator_1/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients_3/generator_1/while/Exit_2_grad/b_exit"
  input: "gradients_3/generator_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Switch_4_grad/b_switch"
  op: "Merge"
  input: "gradients_3/generator_1/while/Exit_4_grad/b_exit"
  input: "gradients_3/generator_1/while/Switch_4_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_2_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_2_grad/MatMul_1/Enter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Reshape_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_3_grad/MatMul_1/Enter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/Shape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul"
  op: "Mul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/Sum"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/RefEnter"
  input: "discriminator_1/while/d_recurr_unit/Sigmoid"
  input: "^gradients_3/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPop/RefEnter"
  input: "^gradients_3/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/d_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1"
  op: "Mul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPop"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/Sum_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients_3/generator_1/while/Switch_3_grad/b_switch"
  input: "gradients_3/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/generator_1/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients_3/generator_1/while/Switch_1_grad/b_switch"
  input: "gradients_3/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/generator_1/while/Switch_1_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients_3/generator_1/while/Switch_2_grad/b_switch"
  input: "gradients_3/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/generator_1/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Merge_4_grad/Switch"
  op: "Switch"
  input: "gradients_3/generator_1/while/Switch_4_grad/b_switch"
  input: "gradients_3/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/generator_1/while/Switch_4_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/mul_1/StackPop"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients_3/generator_1/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Shape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Sum"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/Sigmoid_grad/SigmoidGrad"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/Sigmoid_grad/SigmoidGrad"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Sum_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "gens/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients_3/generator_1/while/Merge_3_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_3"
    }
  }
}
node {
  name: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients_3/generator_1/while/Merge_3_grad/Switch:1"
  input: "^gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/Identity"
        s: "loc:@gens/TensorArray"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/Identity"
        s: "loc:@gens/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  op: "StackPush"
  input: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  input: "generator_1/while/Identity"
  input: "^gradients_3/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/Identity"
        s: "loc:@gens/TensorArray"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/Identity"
        s: "loc:@gens/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  op: "StackPop"
  input: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  input: "^gradients_3/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/Identity"
        s: "loc:@gens/TensorArray"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "^gradients_3/generator_1/while/Gather_grad/Reshape_1/StackPop"
  input: "^gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul/StackPop"
  input: "^gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul/StackPop"
  input: "^gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul/StackPop"
  input: "^gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/StackPop"
  input: "^gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul_1/StackPop"
  input: "^gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul/StackPop"
  input: "^gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1/StackPop"
  input: "^gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  input: "^gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul/StackPop"
  input: "^gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1/StackPop"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/Gather_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/Gather_grad/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/Gather_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/Gather_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients_3/generator_1/Gather_grad/Size"
  input: "gradients_3/generator_1/Gather_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/Gather_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/Gather_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/Gather_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/Gather_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients_3/generator_1/Gather_grad/Shape"
  input: "gradients_3/generator_1/Gather_grad/strided_slice/stack"
  input: "gradients_3/generator_1/Gather_grad/strided_slice/stack_1"
  input: "gradients_3/generator_1/Gather_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients_3/generator_1/Gather_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/Gather_grad/concat"
  op: "ConcatV2"
  input: "gradients_3/generator_1/Gather_grad/ExpandDims"
  input: "gradients_3/generator_1/Gather_grad/strided_slice"
  input: "gradients_3/generator_1/Gather_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/Gather_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/Enter_1_grad/Exit"
  input: "gradients_3/generator_1/Gather_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/Gather_grad/Reshape_1"
  op: "Reshape"
  input: "tokens/Const"
  input: "gradients_3/generator_1/Gather_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/Size"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/ExpandDims/dim"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients_3/generator_1/while/Gather_grad/Size"
  input: "gradients_3/generator_1/while/Gather_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/strided_slice/stack"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/strided_slice/stack_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/strided_slice/stack_2"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients_3/generator_1/while/Gather_grad/Shape"
  input: "gradients_3/generator_1/while/Gather_grad/strided_slice/stack"
  input: "gradients_3/generator_1/while/Gather_grad/strided_slice/stack_1"
  input: "gradients_3/generator_1/while/Gather_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/concat/axis"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/concat"
  op: "ConcatV2"
  input: "gradients_3/generator_1/while/Gather_grad/ExpandDims"
  input: "gradients_3/generator_1/while/Gather_grad/strided_slice"
  input: "gradients_3/generator_1/while/Gather_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/Merge_1_grad/Switch:1"
  input: "gradients_3/generator_1/while/Gather_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/Reshape_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/tokens/ToInt32"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/Reshape_1/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/Gather_grad/Reshape_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/tokens/ToInt32"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/Reshape_1/StackPush"
  op: "StackPush"
  input: "gradients_3/generator_1/while/Gather_grad/Reshape_1/RefEnter"
  input: "generator_1/while/tokens/ToInt32"
  input: "^gradients_3/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/tokens/ToInt32"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/Reshape_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/Gather_grad/Reshape_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/tokens/ToInt32"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/Reshape_1/StackPop"
  op: "StackPop"
  input: "gradients_3/generator_1/while/Gather_grad/Reshape_1/StackPop/RefEnter"
  input: "^gradients_3/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/tokens/ToInt32"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/generator_1/while/Gather_grad/Reshape_1/StackPop"
  input: "gradients_3/generator_1/while/Gather_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "gens/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients_3/generator_1/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients_3/generator_1/while/Merge_4_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray_1"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_3"
    }
  }
}
node {
  name: "gradients_3/generator_1/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients_3/generator_1/while/Merge_4_grad/Switch:1"
  input: "^gradients_3/generator_1/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray_1"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients_3/generator_1/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients_3/generator_1/while/TensorArrayWrite_1/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gens/TensorArray_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Reshape"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_grad/MatMul_1/Enter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Reshape_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_1_grad/MatMul_1/Enter"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_1_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Reshape_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 36
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_1_grad/Size"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_1_grad/ExpandDims/dim"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_1_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients_3/generator_1/while/Gather_1_grad/Size"
  input: "gradients_3/generator_1/while/Gather_1_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_1_grad/strided_slice/stack"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_1_grad/strided_slice/stack_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_1_grad/strided_slice/stack_2"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_1_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients_3/generator_1/while/Gather_1_grad/Shape"
  input: "gradients_3/generator_1/while/Gather_1_grad/strided_slice/stack"
  input: "gradients_3/generator_1/while/Gather_1_grad/strided_slice/stack_1"
  input: "gradients_3/generator_1/while/Gather_1_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_1_grad/concat/axis"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_1_grad/concat"
  op: "ConcatV2"
  input: "gradients_3/generator_1/while/Gather_1_grad/ExpandDims"
  input: "gradients_3/generator_1/while/Gather_1_grad/strided_slice"
  input: "gradients_3/generator_1/while/Gather_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "gradients_3/generator_1/while/Gather_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Gather_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/generator_1/while/Gather_grad/Reshape_1/StackPop"
  input: "gradients_3/generator_1/while/Gather_1_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/AddN_2"
  op: "AddN"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_2_grad/MatMul_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/discriminator_1/while/d_recurr_unit/MatMul_4_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/AddN_2"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/AddN_3"
  op: "AddN"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Reshape_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_3_grad/MatMul_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/mul_grad/Reshape_1"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/MatMul_1_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/discriminator_1/while/d_recurr_unit/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/Reshape_1_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub_1"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 70
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/d_recurr_unit/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/AddN_3"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients_3/generator_1/while/Merge_3_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Switch_4_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients_3/generator_1/while/Merge_4_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "embeddings/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity_1"
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity_1"
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPush"
  op: "StackPush"
  input: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/RefEnter"
  input: "discriminator_1/while/Identity_1"
  input: "^gradients_3/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity_1"
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity_1"
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/discriminator_1/while/discriminator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop"
  op: "StackPop"
  input: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop/RefEnter"
  input: "^gradients_3/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/while/Identity_1"
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_3"
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/StackPop"
  input: "^gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients_3/discriminator_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/Reshape_grad/Reshape"
  input: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_3/AddN_4"
  op: "AddN"
  input: "gradients_3/discriminator_1/while/Merge_1_grad/Switch:1"
  input: "gradients_3/discriminator_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/discriminator_1/while/Switch_1_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients_3/discriminator_1/while/d_recurr_unit/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/discriminator_1/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients_3/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000$\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Reshape/strided_slice/stack"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Reshape/strided_slice/stack_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Reshape/strided_slice/stack_2"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Reshape/strided_slice"
  op: "StridedSlice"
  input: "gradients_3/generator_1/while/Gather_1_grad/Shape"
  input: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Reshape/strided_slice/stack"
  input: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Reshape/strided_slice/stack_1"
  input: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Reshape/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Reshape/tensor"
  op: "UnsortedSegmentSum"
  input: "gradients_3/generator_1/while/Gather_1_grad/Reshape"
  input: "gradients_3/generator_1/while/Gather_1_grad/Reshape_1"
  input: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Reshape/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Reshape/tensor"
  input: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Softmax"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Softmax"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul/RefEnter"
  input: "generator_1/while/g_output_unit/Softmax"
  input: "^gradients_3/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Softmax"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Softmax"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul/StackPop/RefEnter"
  input: "^gradients_3/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Softmax"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul"
  op: "Mul"
  input: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Reshape"
  input: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/Sum"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul"
  input: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/Reshape/shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/Sum"
  input: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/sub"
  op: "Sub"
  input: "gradients_3/generator_1/while/g_output_unit/Reshape_2_grad/Reshape"
  input: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul_1"
  op: "Mul"
  input: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/sub"
  input: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Reshape_1_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_output_unit/Softmax_grad/mul_1"
  input: "gradients_3/generator_1/while/g_output_unit/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Shape"
  input: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Sum"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_output_unit/Reshape_1_grad/Reshape"
  input: "gradients_3/generator_1/while/g_output_unit/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Sum"
  input: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_output_unit/Reshape_1_grad/Reshape"
  input: "gradients_3/generator_1/while/g_output_unit/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Sum_1"
  input: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 36
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/b_acc_1"
  input: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/b_acc_2"
  input: "gradients_3/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/Add"
  op: "Add"
  input: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/Switch:1"
  input: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Tanh"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul/RefEnter"
  input: "generator_1/while/g_output_unit/Tanh"
  input: "^gradients_3/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Tanh"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Tanh"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul/StackPop/RefEnter"
  input: "^gradients_3/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Reshape_1"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "generator/generator/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul_1/Enter"
  input: "gradients_3/generator_1/while/g_output_unit/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/strided_slice/stack"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/strided_slice/stack_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/strided_slice/stack_2"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/strided_slice"
  op: "StridedSlice"
  input: "gradients_3/Shape_1"
  input: "gradients_3/strided_slice/stack"
  input: "gradients_3/strided_slice/stack_1"
  input: "gradients_3/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients_3/range/start"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/range/delta"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/range"
  op: "Range"
  input: "gradients_3/range/start"
  input: "gradients_3/strided_slice"
  input: "gradients_3/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/concat/axis"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/concat"
  op: "ConcatV2"
  input: "gradients_3/generator_1/while/Gather_grad/Reshape"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul"
  input: "gradients_3/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/concat_1/axis"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/concat_1"
  op: "ConcatV2"
  input: "gradients_3/generator_1/while/Gather_grad/Reshape_1"
  input: "gradients_3/range"
  input: "gradients_3/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Shape"
  op: "Shape"
  input: "generator/generator/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Shape"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/strided_slice/stack"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/strided_slice/stack_1"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/concat"
  op: "ConcatV2"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/concat/values_0"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/strided_slice"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/zeros"
  op: "Fill"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/concat"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc"
  op: "Enter"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_2"
  op: "Enter"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_3"
  op: "Merge"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_4"
  op: "Merge"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_1"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_5"
  op: "Merge"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_2"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_3"
  input: "gradients_3/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Switch_1"
  op: "Switch"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_4"
  input: "gradients_3/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Switch_2"
  op: "Switch"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_5"
  input: "gradients_3/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/concat_1/axis"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/concat_1"
  op: "ConcatV2"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Switch:1"
  input: "gradients_3/concat_1"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/concat_2/axis"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/concat_2"
  op: "ConcatV2"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Switch_1:1"
  input: "gradients_3/concat"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Maximum"
  op: "Maximum"
  input: "gradients_3/generator_1/while/Gather_grad/Shape"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/NextIteration_1"
  op: "NextIteration"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/NextIteration_2"
  op: "NextIteration"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_6"
  op: "Exit"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_7"
  op: "Exit"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_8"
  op: "Exit"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul/StackPop"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/concat_2"
  op: "ConcatV2"
  input: "gradients_3/generator_1/Gather_grad/Reshape"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_7"
  input: "gradients_3/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/concat_3/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_3/concat_3"
  op: "ConcatV2"
  input: "gradients_3/generator_1/Gather_grad/Reshape_1"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_1/Enter_grad/b_acc_6"
  input: "gradients_3/concat_3/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/generator_1/while/g_output_unit/add_grad/Shape"
  input: "gradients_3/generator_1/while/g_output_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_grad/Sum"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_output_unit/Tanh_grad/TanhGrad"
  input: "gradients_3/generator_1/while/g_output_unit/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_output_unit/add_grad/Sum"
  input: "gradients_3/generator_1/while/g_output_unit/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_output_unit/Tanh_grad/TanhGrad"
  input: "gradients_3/generator_1/while/g_output_unit/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_output_unit/add_grad/Sum_1"
  input: "gradients_3/generator_1/while/g_output_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/b_acc_1"
  input: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/b_acc_2"
  input: "gradients_3/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/Add"
  op: "Add"
  input: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/Switch:1"
  input: "gradients_3/generator_1/while/g_output_unit/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul/RefEnter"
  input: "generator_1/while/g_output_unit/Reshape"
  input: "^gradients_3/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Reshape"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul/StackPop/RefEnter"
  input: "^gradients_3/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_output_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_output_unit/add_grad/Reshape_1"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "generator/generator/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul_1/Enter"
  input: "gradients_3/generator_1/while/g_output_unit/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/b_acc_1"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/b_acc_2"
  input: "gradients_3/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/Switch:1"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 70
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_output_unit/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul_grad/MatMul_1"
  input: "gradients_3/generator_1/while/g_output_unit/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/AddN_5"
  op: "AddN"
  input: "gradients_3/generator_1/while/Merge_2_grad/Switch:1"
  input: "gradients_3/generator_1/while/g_output_unit/Reshape_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/generator_1/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/Reshape_2_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/AddN_5"
  input: "gradients_3/generator_1/while/g_recurr_unit/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Shape"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Sum"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/Reshape_2_grad/Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/Reshape_2_grad/Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Sum_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Shape"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/RefEnter"
  input: "generator_1/while/g_recurr_unit/Reshape_1"
  input: "^gradients_3/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/StackPop/RefEnter"
  input: "^gradients_3/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Reshape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul"
  op: "Mul"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul_1/RefEnter"
  input: "generator_1/while/g_recurr_unit/sub"
  input: "^gradients_3/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul_1/StackPop/RefEnter"
  input: "^gradients_3/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul_1/StackPop"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Sum_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Shape"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul/RefEnter"
  input: "generator_1/while/g_recurr_unit/Tanh"
  input: "^gradients_3/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul/StackPop/RefEnter"
  input: "^gradients_3/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul"
  op: "Mul"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Reshape_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1/RefEnter"
  input: "generator_1/while/g_recurr_unit/Sigmoid_1"
  input: "^gradients_3/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1/StackPop/RefEnter"
  input: "^gradients_3/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1/StackPop"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Sum_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Shape"
  input: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Sum"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Neg"
  op: "Neg"
  input: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Neg"
  input: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul/StackPop"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/AddN_6"
  op: "AddN"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/sub_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_2_grad/mul_1/StackPop"
  input: "gradients_3/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Shape"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Sum"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/Tanh_grad/TanhGrad"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/Tanh_grad/TanhGrad"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Sum_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Shape"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Sum"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Sum_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul/RefEnter"
  input: "generator_1/while/g_recurr_unit/Reshape"
  input: "^gradients_3/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul/StackPop/RefEnter"
  input: "^gradients_3/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul_1/Enter"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul/RefEnter"
  input: "generator_1/while/g_recurr_unit/mul"
  input: "^gradients_3/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul/StackPop/RefEnter"
  input: "^gradients_3/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Reshape_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul_1/Enter"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_2_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_2_grad/MatMul_1/Enter"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Reshape_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_3_grad/MatMul_1/Enter"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/Shape"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul"
  op: "Mul"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/Sum"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1/RefEnter"
  input: "generator_1/while/g_recurr_unit/Sigmoid"
  input: "^gradients_3/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1/StackPop/RefEnter"
  input: "^gradients_3/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_1/while/g_recurr_unit/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1"
  op: "Mul"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1/StackPop"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/Sum_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/mul_1/StackPop"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Shape_1"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Shape"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Sum"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/Sigmoid_grad/SigmoidGrad"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Sum_1"
  op: "Sum"
  input: "gradients_3/generator_1/while/g_recurr_unit/Sigmoid_grad/SigmoidGrad"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Sum_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Reshape"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_grad/MatMul_1/Enter"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Reshape_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_3/generator_1/while/generator_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_1_grad/MatMul_1/Enter"
  input: "gradients_3/generator_1/while/g_recurr_unit/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_3/AddN_7"
  op: "AddN"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_2_grad/MatMul_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/generator_1/while/g_recurr_unit/MatMul_4_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/AddN_7"
  input: "gradients_3/generator_1/while/g_recurr_unit/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/AddN_8"
  op: "AddN"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Reshape_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_3_grad/MatMul_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/mul_grad/Reshape_1"
  input: "gradients_3/generator_1/while/g_recurr_unit/MatMul_1_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_3/generator_1/while/g_recurr_unit/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/Reshape_1_grad/Shape"
  op: "Const"
  input: "^gradients_3/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 70
      }
    }
  }
}
node {
  name: "gradients_3/generator_1/while/g_recurr_unit/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_3/AddN_8"
  input: "gradients_3/generator_1/while/g_recurr_unit/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients_3/generator_1/while/g_recurr_unit/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_3/generator_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients_3/generator_1/while/g_recurr_unit/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "GradientDescent_3/update_generator/generator/Variable/mul"
  op: "Mul"
  input: "gradients_3/concat_2"
  input: "hyperparams/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable"
      }
    }
  }
}
node {
  name: "GradientDescent_3/update_generator/generator/Variable/ScatterSub"
  op: "ScatterSub"
  input: "generator/generator/Variable"
  input: "gradients_3/concat_3"
  input: "GradientDescent_3/update_generator/generator/Variable/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_3/update_generator/generator/Variable_1/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "generator/generator/Variable_1"
  input: "hyperparams/Variable/read"
  input: "gradients_3/generator_1/while/g_output_unit/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_3/update_generator/generator/Variable_2/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "generator/generator/Variable_2"
  input: "hyperparams/Variable/read"
  input: "gradients_3/generator_1/while/g_output_unit/add/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_3/update_generator/generator/Variable_3/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "generator/generator/Variable_3"
  input: "hyperparams/Variable/read"
  input: "gradients_3/generator_1/while/g_output_unit/add_1/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_3"
  op: "NoOp"
  input: "^GradientDescent_3/update_generator/generator/Variable/ScatterSub"
  input: "^GradientDescent_3/update_generator/generator/Variable_1/ApplyGradientDescent"
  input: "^GradientDescent_3/update_generator/generator/Variable_2/ApplyGradientDescent"
  input: "^GradientDescent_3/update_generator/generator/Variable_3/ApplyGradientDescent"
}
node {
  name: "gradients_4/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_4/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients_4/Fill"
  op: "Fill"
  input: "gradients_4/Shape"
  input: "gradients_4/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/f_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_4/f_count_1"
  op: "Enter"
  input: "gradients_4/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/Merge"
  op: "Merge"
  input: "gradients_4/f_count_1"
  input: "gradients_4/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/Switch"
  op: "Switch"
  input: "gradients_4/Merge"
  input: "generator_2/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/Add/y"
  op: "Const"
  input: "^generator_2/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_4/Add"
  op: "Add"
  input: "gradients_4/Switch:1"
  input: "gradients_4/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/NextIteration"
  op: "NextIteration"
  input: "gradients_4/Add"
  input: "^gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  input: "^gradients_4/generator_2/while/Softmax_grad/mul/StackPush"
  input: "^gradients_4/generator_2/while/MatMul_7_grad/MatMul/StackPush"
  input: "^gradients_4/generator_2/while/MatMul_6_grad/MatMul/StackPush"
  input: "^gradients_4/generator_2/while/mul_1_grad/mul/StackPush"
  input: "^gradients_4/generator_2/while/mul_1_grad/mul_1/StackPush"
  input: "^gradients_4/generator_2/while/mul_2_grad/mul/StackPush"
  input: "^gradients_4/generator_2/while/mul_2_grad/mul_1/StackPush"
  input: "^gradients_4/generator_2/while/MatMul_4_grad/MatMul/StackPush"
  input: "^gradients_4/generator_2/while/MatMul_5_grad/MatMul/StackPush"
  input: "^gradients_4/generator_2/while/mul_grad/mul_1/StackPush"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/f_count_2"
  op: "Exit"
  input: "gradients_4/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/b_count"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_4/b_count_1"
  op: "Enter"
  input: "gradients_4/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/Merge_1"
  op: "Merge"
  input: "gradients_4/b_count_1"
  input: "gradients_4/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients_4/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients_4/Merge_1"
  input: "gradients_4/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/b_count_2"
  op: "LoopCond"
  input: "gradients_4/GreaterEqual"
}
node {
  name: "gradients_4/Switch_1"
  op: "Switch"
  input: "gradients_4/Merge_1"
  input: "gradients_4/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/Sub"
  op: "Sub"
  input: "gradients_4/Switch_1:1"
  input: "gradients_4/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/NextIteration_1"
  op: "NextIteration"
  input: "gradients_4/Sub"
  input: "^gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/b_count_3"
  op: "Exit"
  input: "gradients_4/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/loss_1/truediv_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_4/loss_1/truediv_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_4/loss_1/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_4/loss_1/truediv_grad/Shape"
  input: "gradients_4/loss_1/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/loss_1/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients_4/Fill"
  input: "loss_1/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/truediv_grad/Sum"
  op: "Sum"
  input: "gradients_4/loss_1/truediv_grad/RealDiv"
  input: "gradients_4/loss_1/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/loss_1/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/loss_1/truediv_grad/Sum"
  input: "gradients_4/loss_1/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/loss_1/truediv_grad/Neg"
  op: "Neg"
  input: "loss_1/Neg_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients_4/loss_1/truediv_grad/Neg"
  input: "loss_1/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients_4/loss_1/truediv_grad/RealDiv_1"
  input: "loss_1/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/truediv_grad/mul"
  op: "Mul"
  input: "gradients_4/Fill"
  input: "gradients_4/loss_1/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients_4/loss_1/truediv_grad/mul"
  input: "gradients_4/loss_1/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/loss_1/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_4/loss_1/truediv_grad/Sum_1"
  input: "gradients_4/loss_1/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/loss_1/Neg_1_grad/Neg"
  op: "Neg"
  input: "gradients_4/loss_1/truediv_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/loss_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/loss_1/Neg_1_grad/Neg"
  input: "gradients_4/loss_1/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/loss_1/Sum_grad/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000$\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/loss_1/Sum_grad/Tile"
  op: "Tile"
  input: "gradients_4/loss_1/Sum_grad/Reshape"
  input: "gradients_4/loss_1/Sum_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/loss_1/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000$\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/loss_1/mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000$\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/loss_1/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_4/loss_1/mul_1_grad/Shape"
  input: "gradients_4/loss_1/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/loss_1/mul_1_grad/mul"
  op: "Mul"
  input: "gradients_4/loss_1/Sum_grad/Tile"
  input: "loss_1/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients_4/loss_1/mul_1_grad/mul"
  input: "gradients_4/loss_1/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/loss_1/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/loss_1/mul_1_grad/Sum"
  input: "gradients_4/loss_1/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/loss_1/mul_1_grad/mul_1"
  op: "Mul"
  input: "loss_1/one_hot"
  input: "gradients_4/loss_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients_4/loss_1/mul_1_grad/mul_1"
  input: "gradients_4/loss_1/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/loss_1/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_4/loss_1/mul_1_grad/Sum_1"
  input: "gradients_4/loss_1/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/loss_1/Log_1_grad/Reciprocal"
  op: "Reciprocal"
  input: "loss_1/clip_by_value_1"
  input: "^gradients_4/loss_1/mul_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/Log_1_grad/mul"
  op: "Mul"
  input: "gradients_4/loss_1/mul_1_grad/Reshape_1"
  input: "gradients_4/loss_1/Log_1_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000$\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1_grad/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000$\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "gradients_4/loss_1/clip_by_value_1_grad/Shape_2"
  input: "gradients_4/loss_1/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "loss_1/clip_by_value_1/Minimum"
  input: "loss_1/clip_by_value_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_4/loss_1/clip_by_value_1_grad/Shape"
  input: "gradients_4/loss_1/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1_grad/Select"
  op: "Select"
  input: "gradients_4/loss_1/clip_by_value_1_grad/GreaterEqual"
  input: "gradients_4/loss_1/Log_1_grad/mul"
  input: "gradients_4/loss_1/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1_grad/LogicalNot"
  op: "LogicalNot"
  input: "gradients_4/loss_1/clip_by_value_1_grad/GreaterEqual"
}
node {
  name: "gradients_4/loss_1/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "gradients_4/loss_1/clip_by_value_1_grad/LogicalNot"
  input: "gradients_4/loss_1/Log_1_grad/mul"
  input: "gradients_4/loss_1/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "gradients_4/loss_1/clip_by_value_1_grad/Select"
  input: "gradients_4/loss_1/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/loss_1/clip_by_value_1_grad/Sum"
  input: "gradients_4/loss_1/clip_by_value_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "gradients_4/loss_1/clip_by_value_1_grad/Select_1"
  input: "gradients_4/loss_1/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_4/loss_1/clip_by_value_1_grad/Sum_1"
  input: "gradients_4/loss_1/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000$\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "`\000\000\000$\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Shape_2"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "generator_2/predictions/Reshape"
  input: "loss_1/clip_by_value_1/Minimum/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Shape"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/LessEqual"
  input: "gradients_4/loss_1/clip_by_value_1_grad/Reshape"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/LogicalNot"
  op: "LogicalNot"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/LessEqual"
}
node {
  name: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/LogicalNot"
  input: "gradients_4/loss_1/clip_by_value_1_grad/Reshape"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Select"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Sum"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Select_1"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Sum_1"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/predictions/Reshape_grad/Shape"
  op: "Shape"
  input: "generator_2/predictions/TensorArrayStack/TensorArrayGatherV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/predictions/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/loss_1/clip_by_value_1/Minimum_grad/Reshape"
  input: "gradients_4/generator_2/predictions/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "discriminator_1/predictions_1/TensorArray"
  input: "generator_2/while/Exit_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_4"
    }
  }
}
node {
  name: "gradients_4/generator_2/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "generator_2/while/Exit_3"
  input: "^gradients_4/generator_2/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "gradients_4/generator_2/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "generator_2/predictions/TensorArrayStack/range"
  input: "gradients_4/generator_2/predictions/Reshape_grad/Reshape"
  input: "gradients_4/generator_2/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_4/zeros"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_4/zeros_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients_4/generator_2/predictions/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients_4/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients_4/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients_4/generator_2/while/Exit_3_grad/b_exit"
  input: "gradients_4/generator_2/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients_4/generator_2/while/Exit_1_grad/b_exit"
  input: "gradients_4/generator_2/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients_4/generator_2/while/Exit_2_grad/b_exit"
  input: "gradients_4/generator_2/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients_4/generator_2/while/Switch_3_grad/b_switch"
  input: "gradients_4/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_4/generator_2/while/Switch_3_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients_4/generator_2/while/Switch_1_grad/b_switch"
  input: "gradients_4/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_4/generator_2/while/Switch_1_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients_4/generator_2/while/Switch_2_grad/b_switch"
  input: "gradients_4/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_4/generator_2/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients_4/generator_2/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "discriminator_1/predictions_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients_4/generator_2/while/Merge_3_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_4"
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients_4/generator_2/while/Merge_3_grad/Switch:1"
  input: "^gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
        s: "loc:@generator_2/while/Identity"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
        s: "loc:@generator_2/while/Identity"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  op: "StackPush"
  input: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  input: "generator_2/while/Identity"
  input: "^gradients_4/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
        s: "loc:@generator_2/while/Identity"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
        s: "loc:@generator_2/while/Identity"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  op: "StackPop"
  input: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  input: "^gradients_4/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
        s: "loc:@generator_2/while/Identity"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "^gradients_4/generator_2/while/Softmax_grad/mul/StackPop"
  input: "^gradients_4/generator_2/while/MatMul_7_grad/MatMul/StackPop"
  input: "^gradients_4/generator_2/while/MatMul_6_grad/MatMul/StackPop"
  input: "^gradients_4/generator_2/while/mul_1_grad/mul/StackPop"
  input: "^gradients_4/generator_2/while/mul_1_grad/mul_1/StackPop"
  input: "^gradients_4/generator_2/while/mul_2_grad/mul/StackPop"
  input: "^gradients_4/generator_2/while/mul_2_grad/mul_1/StackPop"
  input: "^gradients_4/generator_2/while/MatMul_4_grad/MatMul/StackPop"
  input: "^gradients_4/generator_2/while/MatMul_5_grad/MatMul/StackPop"
  input: "^gradients_4/generator_2/while/mul_grad/mul_1/StackPop"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_1/predictions_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/Gather_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/Gather_grad/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/Gather_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/Gather_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients_4/generator_2/Gather_grad/Size"
  input: "gradients_4/generator_2/Gather_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/Gather_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/Gather_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/Gather_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/Gather_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients_4/generator_2/Gather_grad/Shape"
  input: "gradients_4/generator_2/Gather_grad/strided_slice/stack"
  input: "gradients_4/generator_2/Gather_grad/strided_slice/stack_1"
  input: "gradients_4/generator_2/Gather_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients_4/generator_2/Gather_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/Gather_grad/concat"
  op: "ConcatV2"
  input: "gradients_4/generator_2/Gather_grad/ExpandDims"
  input: "gradients_4/generator_2/Gather_grad/strided_slice"
  input: "gradients_4/generator_2/Gather_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/Gather_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/Enter_1_grad/Exit"
  input: "gradients_4/generator_2/Gather_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/Gather_grad/Reshape_1"
  op: "Reshape"
  input: "tokens/Const"
  input: "gradients_4/generator_2/Gather_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "embeddings_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings_1/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "embeddings_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings_1/TensorArray"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients_4/generator_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients_4/generator_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients_4/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_4"
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients_4/generator_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients_4/generator_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings_1/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients_4/generator_2/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients_4/generator_2/while/Merge_1_grad/Switch:1"
  input: "gradients_4/generator_2/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings_1/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Reshape_5_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000$\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Reshape_5_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "gradients_4/generator_2/while/Reshape_5_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients_4/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients_4/generator_2/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Softmax_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Softmax"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Softmax_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/Softmax_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Softmax"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Softmax_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients_4/generator_2/while/Softmax_grad/mul/RefEnter"
  input: "generator_2/while/Softmax"
  input: "^gradients_4/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Softmax"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Softmax_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/Softmax_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Softmax"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Softmax_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients_4/generator_2/while/Softmax_grad/mul/StackPop/RefEnter"
  input: "^gradients_4/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Softmax"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Softmax_grad/mul"
  op: "Mul"
  input: "gradients_4/generator_2/while/Reshape_5_grad/Reshape"
  input: "gradients_4/generator_2/while/Softmax_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Softmax_grad/Sum"
  op: "Sum"
  input: "gradients_4/generator_2/while/Softmax_grad/mul"
  input: "gradients_4/generator_2/while/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Softmax_grad/Reshape/shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Softmax_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/Softmax_grad/Sum"
  input: "gradients_4/generator_2/while/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Softmax_grad/sub"
  op: "Sub"
  input: "gradients_4/generator_2/while/Reshape_5_grad/Reshape"
  input: "gradients_4/generator_2/while/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Softmax_grad/mul_1"
  op: "Mul"
  input: "gradients_4/generator_2/while/Softmax_grad/sub"
  input: "gradients_4/generator_2/while/Softmax_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients_4/generator_2/while/Merge_3_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/embeddings_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "embeddings_1/TensorArray"
  input: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings_1/TensorArray"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients_4"
    }
  }
}
node {
  name: "gradients_4/embeddings_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients_4/generator_2/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients_4/embeddings_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings_1/TensorArray"
      }
    }
  }
}
node {
  name: "gradients_4/embeddings_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients_4/embeddings_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "embeddings_1/TensorArrayUnstack/range"
  input: "gradients_4/embeddings_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@embeddings_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Reshape_4_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Reshape_4_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/Softmax_grad/mul_1"
  input: "gradients_4/generator_2/while/Reshape_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/embeddings_1/Gather_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/embeddings_1/Gather_grad/Size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "gradients_4/embeddings_1/Gather_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_4/embeddings_1/Gather_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients_4/embeddings_1/Gather_grad/Size"
  input: "gradients_4/embeddings_1/Gather_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/embeddings_1/Gather_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_4/embeddings_1/Gather_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_4/embeddings_1/Gather_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_4/embeddings_1/Gather_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients_4/embeddings_1/Gather_grad/Shape"
  input: "gradients_4/embeddings_1/Gather_grad/strided_slice/stack"
  input: "gradients_4/embeddings_1/Gather_grad/strided_slice/stack_1"
  input: "gradients_4/embeddings_1/Gather_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients_4/embeddings_1/Gather_grad/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_4/embeddings_1/Gather_grad/concat"
  op: "ConcatV2"
  input: "gradients_4/embeddings_1/Gather_grad/ExpandDims"
  input: "gradients_4/embeddings_1/Gather_grad/strided_slice"
  input: "gradients_4/embeddings_1/Gather_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/embeddings_1/Gather_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/embeddings_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "gradients_4/embeddings_1/Gather_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/embeddings_1/Gather_grad/Reshape_1"
  op: "Reshape"
  input: "input/Placeholder"
  input: "gradients_4/embeddings_1/Gather_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_5_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_5_grad/Shape_1"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_4/generator_2/while/add_5_grad/Shape"
  input: "gradients_4/generator_2/while/add_5_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_5_grad/Sum"
  op: "Sum"
  input: "gradients_4/generator_2/while/Reshape_4_grad/Reshape"
  input: "gradients_4/generator_2/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/add_5_grad/Sum"
  input: "gradients_4/generator_2/while/add_5_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "gradients_4/generator_2/while/Reshape_4_grad/Reshape"
  input: "gradients_4/generator_2/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_4/generator_2/while/add_5_grad/Sum_1"
  input: "gradients_4/generator_2/while/add_5_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_5/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 36
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_5/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_4/generator_2/while/add_5/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_5/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_4/generator_2/while/add_5/Enter_grad/b_acc_1"
  input: "gradients_4/generator_2/while/add_5/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_5/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_4/generator_2/while/add_5/Enter_grad/b_acc_2"
  input: "gradients_4/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_5/Enter_grad/Add"
  op: "Add"
  input: "gradients_4/generator_2/while/add_5/Enter_grad/Switch:1"
  input: "gradients_4/generator_2/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_5/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_4/generator_2/while/add_5/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_5/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_4/generator_2/while/add_5/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Tanh_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/MatMul_7_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Tanh_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients_4/generator_2/while/MatMul_7_grad/MatMul/RefEnter"
  input: "generator_2/while/Tanh_1"
  input: "^gradients_4/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Tanh_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/MatMul_7_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Tanh_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients_4/generator_2/while/MatMul_7_grad/MatMul/StackPop/RefEnter"
  input: "^gradients_4/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Tanh_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7_grad/MatMul"
  op: "MatMul"
  input: "gradients_4/generator_2/while/add_5_grad/Reshape_1"
  input: "gradients_4/generator_2/while/MatMul_7_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7_grad/MatMul_1/Enter"
  op: "Enter"
  input: "generator/generator/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_4/generator_2/while/MatMul_7_grad/MatMul_1/Enter"
  input: "gradients_4/generator_2/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 36
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_4/generator_2/while/MatMul_7/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_4/generator_2/while/MatMul_7/Enter_grad/b_acc_1"
  input: "gradients_4/generator_2/while/MatMul_7/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_4/generator_2/while/MatMul_7/Enter_grad/b_acc_2"
  input: "gradients_4/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7/Enter_grad/Add"
  op: "Add"
  input: "gradients_4/generator_2/while/MatMul_7/Enter_grad/Switch:1"
  input: "gradients_4/generator_2/while/MatMul_7_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_4/generator_2/while/MatMul_7/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_7/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_4/generator_2/while/MatMul_7/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients_4/generator_2/while/MatMul_7_grad/MatMul/StackPop"
  input: "gradients_4/generator_2/while/MatMul_7_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "$\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_4/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_4/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_4/strided_slice"
  op: "StridedSlice"
  input: "gradients_4/Shape_1"
  input: "gradients_4/strided_slice/stack"
  input: "gradients_4/strided_slice/stack_1"
  input: "gradients_4/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients_4/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_4/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients_4/range"
  op: "Range"
  input: "gradients_4/range/start"
  input: "gradients_4/strided_slice"
  input: "gradients_4/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_4/concat"
  op: "ConcatV2"
  input: "gradients_4/generator_2/Gather_grad/Reshape"
  input: "gradients_4/embeddings_1/Gather_grad/Reshape"
  input: "gradients_4/generator_2/while/MatMul_7/Enter_grad/b_acc_3"
  input: "gradients_4/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients_4/concat_1"
  op: "ConcatV2"
  input: "gradients_4/generator_2/Gather_grad/Reshape_1"
  input: "gradients_4/embeddings_1/Gather_grad/Reshape_1"
  input: "gradients_4/range"
  input: "gradients_4/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_4_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_4_grad/Shape_1"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_4/generator_2/while/add_4_grad/Shape"
  input: "gradients_4/generator_2/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_4_grad/Sum"
  op: "Sum"
  input: "gradients_4/generator_2/while/Tanh_1_grad/TanhGrad"
  input: "gradients_4/generator_2/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/add_4_grad/Sum"
  input: "gradients_4/generator_2/while/add_4_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "gradients_4/generator_2/while/Tanh_1_grad/TanhGrad"
  input: "gradients_4/generator_2/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_4/generator_2/while/add_4_grad/Sum_1"
  input: "gradients_4/generator_2/while/add_4_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_4/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_4/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_4/generator_2/while/add_4/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_4/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_4/generator_2/while/add_4/Enter_grad/b_acc_1"
  input: "gradients_4/generator_2/while/add_4/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_4/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_4/generator_2/while/add_4/Enter_grad/b_acc_2"
  input: "gradients_4/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_4/Enter_grad/Add"
  op: "Add"
  input: "gradients_4/generator_2/while/add_4/Enter_grad/Switch:1"
  input: "gradients_4/generator_2/while/add_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_4/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_4/generator_2/while/add_4/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_4/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_4/generator_2/while/add_4/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/MatMul_6_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients_4/generator_2/while/MatMul_6_grad/MatMul/RefEnter"
  input: "generator_2/while/Reshape_3"
  input: "^gradients_4/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/MatMul_6_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients_4/generator_2/while/MatMul_6_grad/MatMul/StackPop/RefEnter"
  input: "^gradients_4/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6_grad/MatMul"
  op: "MatMul"
  input: "gradients_4/generator_2/while/add_4_grad/Reshape_1"
  input: "gradients_4/generator_2/while/MatMul_6_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6_grad/MatMul_1/Enter"
  op: "Enter"
  input: "generator/generator/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_4/generator_2/while/MatMul_6_grad/MatMul_1/Enter"
  input: "gradients_4/generator_2/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 70
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients_4/generator_2/while/MatMul_6/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients_4/generator_2/while/MatMul_6/Enter_grad/b_acc_1"
  input: "gradients_4/generator_2/while/MatMul_6/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6/Enter_grad/Switch"
  op: "Switch"
  input: "gradients_4/generator_2/while/MatMul_6/Enter_grad/b_acc_2"
  input: "gradients_4/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6/Enter_grad/Add"
  op: "Add"
  input: "gradients_4/generator_2/while/MatMul_6/Enter_grad/Switch:1"
  input: "gradients_4/generator_2/while/MatMul_6_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients_4/generator_2/while/MatMul_6/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_6/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients_4/generator_2/while/MatMul_6/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Reshape_3_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 70
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Reshape_3_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/MatMul_6_grad/MatMul_1"
  input: "gradients_4/generator_2/while/Reshape_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/AddN"
  op: "AddN"
  input: "gradients_4/generator_2/while/Merge_2_grad/Switch:1"
  input: "gradients_4/generator_2/while/Reshape_3_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_4/generator_2/while/Switch_2_grad/b_switch"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Reshape_2_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/AddN"
  input: "gradients_4/generator_2/while/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_3_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_4/generator_2/while/add_3_grad/Shape"
  input: "gradients_4/generator_2/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_3_grad/Sum"
  op: "Sum"
  input: "gradients_4/generator_2/while/Reshape_2_grad/Reshape"
  input: "gradients_4/generator_2/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/add_3_grad/Sum"
  input: "gradients_4/generator_2/while/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "gradients_4/generator_2/while/Reshape_2_grad/Reshape"
  input: "gradients_4/generator_2/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_4/generator_2/while/add_3_grad/Sum_1"
  input: "gradients_4/generator_2/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/Shape_1"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_4/generator_2/while/mul_1_grad/Shape"
  input: "gradients_4/generator_2/while/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients_4/generator_2/while/mul_1_grad/mul/RefEnter"
  input: "generator_2/while/Reshape_1"
  input: "^gradients_4/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients_4/generator_2/while/mul_1_grad/mul/StackPop/RefEnter"
  input: "^gradients_4/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/mul"
  op: "Mul"
  input: "gradients_4/generator_2/while/add_3_grad/Reshape"
  input: "gradients_4/generator_2/while/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients_4/generator_2/while/mul_1_grad/mul"
  input: "gradients_4/generator_2/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/mul_1_grad/Sum"
  input: "gradients_4/generator_2/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients_4/generator_2/while/mul_1_grad/mul_1/RefEnter"
  input: "generator_2/while/sub"
  input: "^gradients_4/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/sub"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/sub"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients_4/generator_2/while/mul_1_grad/mul_1/StackPop/RefEnter"
  input: "^gradients_4/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/sub"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients_4/generator_2/while/mul_1_grad/mul_1/StackPop"
  input: "gradients_4/generator_2/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients_4/generator_2/while/mul_1_grad/mul_1"
  input: "gradients_4/generator_2/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_4/generator_2/while/mul_1_grad/Sum_1"
  input: "gradients_4/generator_2/while/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/Shape_1"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_4/generator_2/while/mul_2_grad/Shape"
  input: "gradients_4/generator_2/while/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Tanh"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients_4/generator_2/while/mul_2_grad/mul/RefEnter"
  input: "generator_2/while/Tanh"
  input: "^gradients_4/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Tanh"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Tanh"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients_4/generator_2/while/mul_2_grad/mul/StackPop/RefEnter"
  input: "^gradients_4/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Tanh"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/mul"
  op: "Mul"
  input: "gradients_4/generator_2/while/add_3_grad/Reshape_1"
  input: "gradients_4/generator_2/while/mul_2_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients_4/generator_2/while/mul_2_grad/mul"
  input: "gradients_4/generator_2/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/mul_2_grad/Sum"
  input: "gradients_4/generator_2/while/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Sigmoid_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients_4/generator_2/while/mul_2_grad/mul_1/RefEnter"
  input: "generator_2/while/Sigmoid_1"
  input: "^gradients_4/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Sigmoid_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Sigmoid_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients_4/generator_2/while/mul_2_grad/mul_1/StackPop/RefEnter"
  input: "^gradients_4/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Sigmoid_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients_4/generator_2/while/mul_2_grad/mul_1/StackPop"
  input: "gradients_4/generator_2/while/add_3_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients_4/generator_2/while/mul_2_grad/mul_1"
  input: "gradients_4/generator_2/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_4/generator_2/while/mul_2_grad/Sum_1"
  input: "gradients_4/generator_2/while/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/sub_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/sub_grad/Shape_1"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_4/generator_2/while/sub_grad/Shape"
  input: "gradients_4/generator_2/while/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/sub_grad/Sum"
  op: "Sum"
  input: "gradients_4/generator_2/while/mul_1_grad/Reshape"
  input: "gradients_4/generator_2/while/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/sub_grad/Sum"
  input: "gradients_4/generator_2/while/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients_4/generator_2/while/mul_1_grad/Reshape"
  input: "gradients_4/generator_2/while/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/sub_grad/Neg"
  op: "Neg"
  input: "gradients_4/generator_2/while/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_4/generator_2/while/sub_grad/Neg"
  input: "gradients_4/generator_2/while/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients_4/generator_2/while/mul_2_grad/mul/StackPop"
  input: "gradients_4/generator_2/while/mul_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/AddN_1"
  op: "AddN"
  input: "gradients_4/generator_2/while/mul_2_grad/Reshape"
  input: "gradients_4/generator_2/while/sub_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_4/generator_2/while/mul_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients_4/generator_2/while/mul_2_grad/mul_1/StackPop"
  input: "gradients_4/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_2_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_2_grad/Shape_1"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_4/generator_2/while/add_2_grad/Shape"
  input: "gradients_4/generator_2/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_2_grad/Sum"
  op: "Sum"
  input: "gradients_4/generator_2/while/Tanh_grad/TanhGrad"
  input: "gradients_4/generator_2/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/add_2_grad/Sum"
  input: "gradients_4/generator_2/while/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients_4/generator_2/while/Tanh_grad/TanhGrad"
  input: "gradients_4/generator_2/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_4/generator_2/while/add_2_grad/Sum_1"
  input: "gradients_4/generator_2/while/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_1_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_4/generator_2/while/add_1_grad/Shape"
  input: "gradients_4/generator_2/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_1_grad/Sum"
  op: "Sum"
  input: "gradients_4/generator_2/while/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients_4/generator_2/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/add_1_grad/Sum"
  input: "gradients_4/generator_2/while/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients_4/generator_2/while/Sigmoid_1_grad/SigmoidGrad"
  input: "gradients_4/generator_2/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_4/generator_2/while/add_1_grad/Sum_1"
  input: "gradients_4/generator_2/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_4_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_4_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/MatMul_4_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_4_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients_4/generator_2/while/MatMul_4_grad/MatMul/RefEnter"
  input: "generator_2/while/Reshape"
  input: "^gradients_4/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_4_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/MatMul_4_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_4_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients_4/generator_2/while/MatMul_4_grad/MatMul/StackPop/RefEnter"
  input: "^gradients_4/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Reshape"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_4_grad/MatMul"
  op: "MatMul"
  input: "gradients_4/generator_2/while/add_2_grad/Reshape"
  input: "gradients_4/generator_2/while/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_4_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_4_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_4/generator_2/while/MatMul_4_grad/MatMul_1/Enter"
  input: "gradients_4/generator_2/while/add_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_5_grad/MatMul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_5_grad/MatMul/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/MatMul_5_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_5_grad/MatMul/StackPush"
  op: "StackPush"
  input: "gradients_4/generator_2/while/MatMul_5_grad/MatMul/RefEnter"
  input: "generator_2/while/mul"
  input: "^gradients_4/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_5_grad/MatMul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/MatMul_5_grad/MatMul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_5_grad/MatMul/StackPop"
  op: "StackPop"
  input: "gradients_4/generator_2/while/MatMul_5_grad/MatMul/StackPop/RefEnter"
  input: "^gradients_4/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_5_grad/MatMul"
  op: "MatMul"
  input: "gradients_4/generator_2/while/add_2_grad/Reshape_1"
  input: "gradients_4/generator_2/while/MatMul_5_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_5_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_5_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_4/generator_2/while/MatMul_5_grad/MatMul_1/Enter"
  input: "gradients_4/generator_2/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "gradients_4/generator_2/while/add_1_grad/Reshape"
  input: "gradients_4/generator_2/while/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_2_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_4/generator_2/while/MatMul_2_grad/MatMul_1/Enter"
  input: "gradients_4/generator_2/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "gradients_4/generator_2/while/add_1_grad/Reshape_1"
  input: "gradients_4/generator_2/while/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_3_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_4/generator_2/while/MatMul_3_grad/MatMul_1/Enter"
  input: "gradients_4/generator_2/while/add_1_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_4/generator_2/while/mul_grad/Shape"
  input: "gradients_4/generator_2/while/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_grad/mul"
  op: "Mul"
  input: "gradients_4/generator_2/while/MatMul_5_grad/MatMul_1"
  input: "gradients_4/generator_2/while/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_grad/Sum"
  op: "Sum"
  input: "gradients_4/generator_2/while/mul_grad/mul"
  input: "gradients_4/generator_2/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/mul_grad/Sum"
  input: "gradients_4/generator_2/while/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Sigmoid"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients_4/generator_2/while/mul_grad/mul_1/RefEnter"
  input: "generator_2/while/Sigmoid"
  input: "^gradients_4/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Sigmoid"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients_4/generator_2/while/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Sigmoid"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients_4/generator_2/while/mul_grad/mul_1/StackPop/RefEnter"
  input: "^gradients_4/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_2/while/Sigmoid"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_grad/mul_1"
  op: "Mul"
  input: "gradients_4/generator_2/while/mul_grad/mul_1/StackPop"
  input: "gradients_4/generator_2/while/MatMul_5_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients_4/generator_2/while/mul_grad/mul_1"
  input: "gradients_4/generator_2/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_4/generator_2/while/mul_grad/Sum_1"
  input: "gradients_4/generator_2/while/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "gradients_4/generator_2/while/mul_grad/mul_1/StackPop"
  input: "gradients_4/generator_2/while/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_grad/Shape_1"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "F\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients_4/generator_2/while/add_grad/Shape"
  input: "gradients_4/generator_2/while/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_grad/Sum"
  op: "Sum"
  input: "gradients_4/generator_2/while/Sigmoid_grad/SigmoidGrad"
  input: "gradients_4/generator_2/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/generator_2/while/add_grad/Sum"
  input: "gradients_4/generator_2/while/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_grad/Sum_1"
  op: "Sum"
  input: "gradients_4/generator_2/while/Sigmoid_grad/SigmoidGrad"
  input: "gradients_4/generator_2/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients_4/generator_2/while/add_grad/Sum_1"
  input: "gradients_4/generator_2/while/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients_4/generator_2/while/add_grad/Reshape"
  input: "gradients_4/generator_2/while/MatMul_4_grad/MatMul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_4/generator_2/while/MatMul_grad/MatMul_1/Enter"
  input: "gradients_4/generator_2/while/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients_4/generator_2/while/add_grad/Reshape_1"
  input: "gradients_4/generator_2/while/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_1_grad/MatMul_1/Enter"
  op: "Enter"
  input: "discriminator/discriminator/weights/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients_4/generator_2/while/generator_2/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "gradients_4/generator_2/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "gradients_4/generator_2/while/MatMul_1_grad/MatMul_1/Enter"
  input: "gradients_4/generator_2/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients_4/AddN_2"
  op: "AddN"
  input: "gradients_4/generator_2/while/MatMul_4_grad/MatMul_1"
  input: "gradients_4/generator_2/while/MatMul_2_grad/MatMul_1"
  input: "gradients_4/generator_2/while/MatMul_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_4/generator_2/while/MatMul_4_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Reshape_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/AddN_2"
  input: "gradients_4/generator_2/while/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/AddN_3"
  op: "AddN"
  input: "gradients_4/generator_2/while/mul_1_grad/Reshape_1"
  input: "gradients_4/generator_2/while/MatMul_3_grad/MatMul_1"
  input: "gradients_4/generator_2/while/mul_grad/Reshape_1"
  input: "gradients_4/generator_2/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients_4/generator_2/while/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Reshape_1_grad/Shape"
  op: "Const"
  input: "^gradients_4/Sub"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 70
      }
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients_4/AddN_3"
  input: "gradients_4/generator_2/while/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients_4/generator_2/while/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients_4/generator_2/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients_4/generator_2/while/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "GradientDescent_4/update_generator/generator/Variable/mul"
  op: "Mul"
  input: "gradients_4/concat"
  input: "hyperparams/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable"
      }
    }
  }
}
node {
  name: "GradientDescent_4/update_generator/generator/Variable/ScatterSub"
  op: "ScatterSub"
  input: "generator/generator/Variable"
  input: "gradients_4/concat_1"
  input: "GradientDescent_4/update_generator/generator/Variable/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_4/update_generator/generator/Variable_1/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "generator/generator/Variable_1"
  input: "hyperparams/Variable/read"
  input: "gradients_4/generator_2/while/MatMul_6/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_4/update_generator/generator/Variable_2/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "generator/generator/Variable_2"
  input: "hyperparams/Variable/read"
  input: "gradients_4/generator_2/while/add_4/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_4/update_generator/generator/Variable_3/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "generator/generator/Variable_3"
  input: "hyperparams/Variable/read"
  input: "gradients_4/generator_2/while/add_5/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/generator/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "GradientDescent_4"
  op: "NoOp"
  input: "^GradientDescent_4/update_generator/generator/Variable/ScatterSub"
  input: "^GradientDescent_4/update_generator/generator/Variable_1/ApplyGradientDescent"
  input: "^GradientDescent_4/update_generator/generator/Variable_2/ApplyGradientDescent"
  input: "^GradientDescent_4/update_generator/generator/Variable_3/ApplyGradientDescent"
}
versions {
  producer: 21
}
